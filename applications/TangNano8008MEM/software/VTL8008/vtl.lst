 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 1 - 2024年08月18日 14時35分23秒


       1/       0 :                     ;;;---------------------------------------------------------------------------
       2/       0 :                     ;;; Very Tiny Language Interpreter (VTL-8008) for Intel 8008
       3/       0 :                     ;;; ported (and rewrited) from VTL-4004
       4/       0 :                     ;;;
       5/       0 :                     ;;; This program is for TangNano8008MEM system.
       6/       0 :                     ;;; It will be easily ported by simply writing PUTCH and GETCH and
       7/       0 :                     ;;; modifing the memory map.
       8/       0 :                     ;;;
       9/       0 :                     ;;; by Ryo Mukai
      10/       0 :                     ;;; https://github.com/ryomuk
      11/       0 :                     ;;; 2024/08/18
      12/       0 :                     ;;;---------------------------------------------------------------------------
      13/       0 :                     
      14/       0 :                     ;;;---------------------------------------------------------------------------
      15/       0 :                     ;;; This source can be assembled with the Macroassembler AS
      16/       0 :                     ;;; (http://john.ccac.rwth-aachen.de:8000/as/)
      17/       0 :                     ;;;---------------------------------------------------------------------------
      18/       0 :                     
      19/       0 :                      	cpu 8008new	       ; AS's command to specify CPU
      20/       0 :                     ;;; 	cpu 8080
      21/       0 : =>TRUE               	if MOMCPUNAME=="8008NEW"
      22/       0 : =44H                 CODE_JMP equ 44H
      23/       0 : =>FALSE              	elseif MOMCPUNAME=="8080"
      24/       0 :                     CODE_JMP equ 0C3H
      25/       0 : =>FALSE              	else
      26/       0 :                     	error "unknown CPU"
      27/       0 :                     	error MOMCPUNAME
      28/       0 : [21]                 	endif
      29/       0 :                     ;;;---------------------------------------------------------------------------
      30/       0 :                     ;;; some macros
      31/       0 :                     ;;;---------------------------------------------------------------------------
      32/       0 :                     lo     	function x, ((x)&255)
      33/       0 :                     up     	function x, (((x)>>8)&255)
      34/       0 :                     
      35/       0 :                     LXI_HL 	macro x
      36/       0 :                     	MVI H,up(x)
      37/       0 :                     	MVI L,lo(x)
      38/       0 :                     	endm
      39/       0 :                     
      40/       0 :                     LXI_BC 	macro x
      41/       0 :                     	MVI B,up(x)
      42/       0 :                     	MVI C,lo(x)
      43/       0 :                     	endm
      44/       0 :                     
      45/       0 :                     MVI_REG16 macro x,y
      46/       0 :                     	LXI_HL x
      47/       0 :                     	MVI M,lo(y)
      48/       0 :                     	INR L
      49/       0 :                     	MVI M,up(y)
      50/       0 :                     	DCR L
      51/       0 :                     	endm
      52/       0 :                     
      53/       0 : =1H                  DEBUG   equ 1
      54/       0 : =>TRUE               	if DEBUG
      55/       0 :                     ;;;---------------------------------------------------------------------------
      56/       0 :                     ;;; for debug
      57/       0 :                     ;;; SAFEPUTCHAR
      58/       0 :                     ;;; PUTCHAR keeping A and B
      59/       0 :                     ;;; for debug
      60/       0 :                     ;;; destroy HL
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 2 - 2024年08月18日 14時35分23秒


      61/       0 :                     ;;;---------------------------------------------------------------------------
      62/       0 :                     SAFEPUTCHAR macro x
      63/       0 :                     	CALL PUSH_A
      64/       0 :                     	MVI A,x
      65/       0 :                     	OUT REG_TX
      66/       0 :                     	CALL POP_A
      67/       0 :                     	endm
      68/       0 :                     
      69/       0 : [54]                 	endif
      70/       0 :                     
      71/       0 :                     ;;;---------------------------------------------------------------------------
      72/       0 :                     ;;; some constants
      73/       0 :                     ;;;---------------------------------------------------------------------------
      74/       0 : =0AH                 LF	equ 0AH			; '\n'
      75/       0 : =0DH                 CR	equ 0DH			; '\r'
      76/       0 :                     	
      77/       0 :                     ;;;---------------------------------------------------------------------------
      78/       0 :                     ;;; Register usage
      79/       0 :                     ;;; A: ACC
      80/       0 :                     ;;; B: tmp
      81/       0 :                     ;;; C: tmp
      82/       0 :                     ;;; D: memory register index0
      83/       0 :                     ;;; E: memroy register index1
      84/       0 :                     ;;; HL: tmp for memory operation
      85/       0 :                     ;;;---------------------------------------------------------------------------
      86/       0 :                     
      87/       0 :                     ;;;---------------------------------------------------------------------------
      88/       0 :                     ;;; Memory Map
      89/       0 :                     ;;;---------------------------------------------------------------------------
      90/       0 : =1000H               PROGRAM_START	equ 1000H
      91/       0 : =37FFH               PROGRAM_END	equ 37FFH
      92/       0 : =3800H               REGTOP		equ 3800H ; lo(REGTOP) must be 00H;
      93/       0 : =3900H               ARRAYTOP	equ 3900H
      94/       0 : =3D00H               RETURNSTACK	equ 3D00H ; used downwards used by VTL !,]
      95/       0 : =3D00H               LINEBUF		equ 3D00H ; used upperwards
      96/       0 : =3E00H               PCSTACK       	equ 3E00H ; stack for Subroutine call (3E00-3EFF)
      97/       0 : =3F00H               STACK         	equ 3F00H ; stack for registers       (3F00-3FFF)
      98/       0 :                     
      99/       0 : =38H                 REGPAGE		equ up(REGTOP)	; 
     100/       0 :                     
     101/       0 :                     ;;;---------------------------------------------------------------------------
     102/       0 :                     ;;; for pseudo random generator
     103/       0 :                     ;;;---------------------------------------------------------------------------
     104/       0 : =4D2H                RANDOM_SEED equ 1234
     105/       0 :                     	
     106/       0 :                     ;;;---------------------------------------------------------------------------
     107/       0 :                     ;;; Data registers
     108/       0 :                     ;;; must be in one page
     109/       0 :                     ;;;---------------------------------------------------------------------------
     110/       0 :                     
     111/    3800 :                     	org REGTOP
     112/    3800 :                     
     113/    3800 :                     
     114/    3800 :                     REG16_INDEX:		DW ?	; 00H or @, `
     115/    3802 :                     REG16_A_TO_Z:		DW 26 DUP ?	; 02H-34H
     116/    3836 :                     REG16_LINENUM:		DW ?	; current line number
     117/    3838 :                     REG16_THISLINE_PTR:	DW ?	; pointer to the top of the current line
     118/    383A :                     REG16_NEXTLINE_PTR:	DW ?	; pointer to the next program line
     119/    383C :                     REG16_PEND:		DW ?	; pointer to the end of program
     120/    383E :                     REG16_LVALUE:		DW ?
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 3 - 2024年08月18日 14時35分23秒


     121/    3840 :                     REG16_RVALUE:		DW ?
     122/    3842 :                     REG16_FACTOR:		DW ?
     123/    3844 :                     REG16_EVAL:		DW ?	; result of evaluation
     124/    3846 :                     REG16_RMND:		DW ?	; Remainder (result of last DIV)
     125/    3848 :                     REG16_RETURNSTACK:	DW ?	; stack for != and ]
     126/    384A :                     REG16_RANDOM0:		DW ?	; for pseudo random number
     127/    384C :                     REG16_RANDOM1:		DW ?	; for pseudo random number
     128/    384E :                     REG16_ARRAYINDEX:	DW ?	; for array assignment
     129/    3850 :                     REG16_TMP_ARRAY:	DW ?	; for array read
     130/    3852 :                     REG16_TMP:		DW ?
     131/    3854 :                     REG16_TMP2:		DW ?
     132/    3856 :                     REG16_TMP_MUL:		DW ?
     133/    3858 :                     REG16_TMP2_MUL:		DW ?
     134/    385A :                     REG16_TMP_GETNUM:	DW ?
     135/    385C :                     REG16_TMP_REG		DW ?	; tmp for PUSH/POP_REG16x
     136/    385E :                     REG16_TMP_PRINT		DW ?	; tmp for PRINT_REG16
     137/    3860 :                     REG16_TEST		DW ?
     138/    3862 :                     REG16_TEST2		DW ?
     139/    3864 :                     REG16_DIVRESULT:	DW ?
     140/    3866 :                     REG16_DIVIDEND      	DW ?	
     141/    3868 :                     REG16_DIVISOR       	DW ?	
     142/    386A :                     REG16_MON_TMP:		DW ?
     143/    386C :                     REG16_MON_TMP2:		DW ?
     144/    386E :                     REG16_ERROR:		DW ?
     145/    3870 :                     REG8_ERROR2:		DB ?
     146/    3871 :                     REG8_SIGNDIVIDEND:	DB ?	; sign of the dividend
     147/    3872 :                     REG8_SIGNDIVISOR:	DB ?	; sign of the divisor
     148/    3873 :                     REG8_ZEROSUP:		DB ?
     149/    3874 :                     REG16_CONST_10000:      DW ?	; Here is RAM area
     150/    3876 :                     REG16_CONST_1000:	DW ?	; so these constants are
     151/    3878 :                     REG16_CONST_100:	DW ?	; initialized in the program
     152/    387A :                     REG16_CONST_10:	        DW ?
     153/    387C :                     ;;;---------------------------------------------------------------------------
     154/    387C :                     ;;; RETURN_BY_JMP
     155/    387C :                     ;;; This routine is the end of the RETURN_BY_PCSTACK
     156/    387C :                     ;;; the target address is variable, so this is located on the data area
     157/    387C :                     ;;; (not a ROM area)
     158/    387C :                     ;;;---------------------------------------------------------------------------
     159/    387C :                     RETURN_BY_JMP:		DB ?    ; write 'CODE_JMP'(=44H or 0C3H) in the program
     160/    387D :                     RETURN_ADDRESS:		DW ?	; operand is written by RETURN_BY_PCSTACK
     161/    387F :                     
     162/    387F :                     REG16_LAST:
     163/    387F : =>FALSE              	if up(REG16_LAST-2) != REGPAGE
     164/    387F :                     	error "Register area exceeded one page!"
     165/    387F : [163]                	endif
     166/    387F :                     	
     167/    387F : =7FFFH               MAXINT			equ 7FFFH
     168/    387F : =8001H               MININT			equ 8001H
     169/    387F :                     	
     170/    387F :                     ;;;---------------------------------------------------------------------------
     171/    387F :                     ;;; Program Start
     172/    387F :                     ;;;---------------------------------------------------------------------------
     173/       0 :                     	org 0000H
     174/       0 :                     
     175/       0 :                     MAIN:
     176/       0 : C0                  RST0:	NOP
     177/       1 : 44 00 01            	JMP START
     178/       8 :                     	org 8H
     179/       8 : 44 00 01            RST1:	JMP START
     180/      10 :                     	org 10H
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 4 - 2024年08月18日 14時35分23秒


     181/      10 : 44 00 01            RST2:	JMP START
     182/      18 :                     	org 18H
     183/      18 : 44 00 01            RST3:	JMP START
     184/      20 :                     	org 20H
     185/      20 : 44 00 01            RST4:	JMP START
     186/      28 :                     	org 28H
     187/      28 : 44 00 01            RST5:	JMP START
     188/      30 :                     	org 30H
     189/      30 : 44 00 01            RST6:	JMP START
     190/      38 :                     	org 38H
     191/      38 : 44 00 01            RST7:	JMP START
     192/      3B :                     
     193/      40 :                     	org 40H
     194/      40 :                     
     195/      40 :                     ;;;----------------------------------------------------------------------------
     196/      40 :                     ;;; user dependent console I/O routine
     197/      40 :                     ;;;----------------------------------------------------------------------------
     198/      40 :                     	include "user.asm"
(1)    1/      40 :                     ;;;----------------------------------------------------------------------------
(1)    2/      40 :                     ;;; User dependent console I/O routines
(1)    3/      40 :                     ;;;----------------------------------------------------------------------------
(1)    4/      40 : =0H                  REG_CSR equ 00H
(1)    5/      40 : =1H                  REG_RX  equ 01H	
(1)    6/      40 : =10H                 REG_TX  equ 10H	
(1)    7/      40 :                     
(1)    8/      40 : C8                  PUTCH:	MOV B,A
(1)    9/      41 : 41                  .WAIT:	IN REG_CSR
(1)   10/      42 : 24 04               	ANI 04H
(1)   11/      44 : 68 41 00            	JZ .WAIT
(1)   12/      47 : C1                  	MOV A,B
(1)   13/      48 : 61                  	OUT REG_TX
(1)   14/      49 : 07                  	RET	
(1)   15/      4A :                     
(1)   16/      4A : 41                  GETCH:	IN REG_CSR
(1)   17/      4B : 24 01               	ANI 01H
(1)   18/      4D : 68 4A 00            	JZ GETCH
(1)   19/      50 : 43                  	IN REG_RX
(1)   20/      51 : 07                  	RET
(1)   21/      52 :                     
     199/      52 :                     
     200/      52 :                     ;;;----------------------------------------------------------------------------
     201/      52 :                     ;;; some basic I/O routines
     202/      52 :                     ;;;----------------------------------------------------------------------------
     203/      52 :                     ;;;---------------------------------------------------------------------------
     204/      52 :                     ;;; PUTCHAR
     205/      52 :                     ;;; defined by macro
     206/      52 :                     ;;; destroy A,B
     207/      52 :                     ;;;---------------------------------------------------------------------------
     208/      52 :                     PUTCHAR macro x
     209/      52 :                     	MVI  A,x
     210/      52 :                     	CALL PUTCH
     211/      52 :                     	endm
     212/      52 :                     	
     213/      52 :                     ;;;---------------------------------------------------------------------------
     214/      52 :                     ;;; PUTS
     215/      52 :                     ;;; print string *(HL)
     216/      52 :                     ;;; destroy: A, B, HL
     217/      52 :                     ;;;---------------------------------------------------------------------------
     218/      52 : C7                  PUTS:	MOV A,M
     219/      53 : A0                  	ANA A
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 5 - 2024年08月18日 14時35分23秒


     220/      54 : 2B                  	RZ
     221/      55 : 46 40 00            	CALL PUTCH
     222/      58 : 30                  	INR L
     223/      59 : 48 52 00            	JNZ PUTS
     224/      5C : 28                  	INR H
     225/      5D : 44 52 00            	JMP PUTS
     226/      60 :                     
     227/      60 :                     ;;;---------------------------------------------------------------------------
     228/      60 :                     ;;; PRINT_CRLF
     229/      60 :                     ;;;---------------------------------------------------------------------------
     230/      60 :                     PRINT_CRLF:	
     231/      60 : (MACRO)              	PUTCHAR CR
     231/      60 : 06 0D                       MVI  A,CR
     231/      62 : 46 40 00                    CALL PUTCH
     232/      65 : (MACRO)              	PUTCHAR LF
     232/      65 : 06 0A                       MVI  A,LF
     232/      67 : 46 40 00                    CALL PUTCH
     233/      6A : 07                  	RET
     234/      6B :                     
     235/      6B :                     ;;;---------------------------------------------------------------------------
     236/      6B :                     ;;; init system
     237/      6B :                     ;;;---------------------------------------------------------------------------
     238/     100 :                     	org 100H
     239/     100 :                     START:
     240/     100 : =>FALSE              	if MOMCPUNAME=="8080"
     241/     100 :                     	LXI SP,0000H
     242/     100 : [240]                	endif
     243/     100 :                     	
     244/     100 : (MACRO)              	LXI_HL STR_VFD_INIT ; init VFD
     244/     100 : 2E 01                       MVI H,up(STR_VFD_INIT)
     244/     102 : 36 0A                       MVI L,lo(STR_VFD_INIT)
     245/     104 : 46 52 00                    CALL PUTS
     246/     107 : 44 89 07            	JMP VTL_START
     247/     10A :                     
     248/     10A :                     ;;;----------------------------------------------------------------------------
     249/     10A :                     ;;; String data
     250/     10A :                     ;;;----------------------------------------------------------------------------
     251/     10A :                     
     252/     10A :                     STR_VFD_INIT:		;reset VFD and set scroll mode
     253/     10A : 1B 40 1F 02 00      	DB 1bH, 40H, 1fH, 02H, 0
     254/     10F :                     STR_VTL_MESSAGE:
     255/     10F : 0D 0A               	DB "\r\n"
     256/     111 : 56 54 4C 2D 38 30   	DB "VTL-8008 Interpreter Ver 2.0\r\n"
              117 : 30 38 20 49 6E 74 
              11D : 65 72 70 72 65 74 
              123 : 65 72 20 56 65 72 
              129 : 20 32 2E 30 0D 0A 
     257/     12F : 28 43 29 20 32 30   	DB "(C) 2024 Ryo Mukai\r\n", 0
              135 : 32 34 20 52 79 6F 
              13B : 20 4D 75 6B 61 69 
              141 : 0D 0A 00          
     258/     144 :                     STR_VTL_OK:
     259/     144 : 0D 0A 4F 4B 0D 0A   	DB "\r\nOK\r\n", 0
              14A : 00                
     260/     14B :                     STR_VTL_ERROR_SYNTAX:
     261/     14B : 53 59 45 52 52 00   	DB "SYERR", 0
     262/     151 :                     STR_VTL_ERROR_PRINT:
     263/     151 : 50 52 45 52 52 00   	DB "PRERR", 0
     264/     157 :                     STR_VTL_ERROR_OPERATOR:
     265/     157 : 4F 50 45 52 52 00   	DB "OPERR", 0
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 6 - 2024年08月18日 14時35分23秒


     266/     15D :                     STR_VTL_ERROR_EOL:
     267/     15D : 45 4F 4C 45 52 52   	DB "EOLERR", 0
              163 : 00                
     268/     164 :                     STR_VTL_ERROR_FACTOR:
     269/     164 : 46 54 45 52 52 00   	DB "FTERR", 0
     270/     16A :                     STR_VTL_BUF:
     271/     16A : 42 55 46 3D 00      	DB "BUF=", 0
     272/     16F :                     STR_VTL_SP:
     273/     16F : 53 50 3D 00         	DB "SP=", 0
     274/     173 :                     STR_VTL_PCSP:
     275/     173 : 50 43 53 50 3D 00   	DB "PCSP=", 0
     276/     179 :                     STR_VTL_ERRORLINENUM:
     277/     179 : 49 4E 20 23 00      	DB "IN #", 0
     278/     17E :                     
     279/     17E :                     ;;;---------------------------------------------------------------------------
     280/     17E :                     ;;; CALL/RETRUN on memory stack
     281/     17E :                     ;;; usage:
     282/     17E :                     ;;;  set return address to register pair BC and jmp to subroutine
     283/     17E :                     ;;;  the subroutine pushes the BC to PCSTACK
     284/     17E :                     ;;;  and returns by RETURN_BY_PCSTACK
     285/     17E :                     ;;; 
     286/     17E :                     ;;;	LXI_BC RET_X
     287/     17E :                     ;;; 	JMP SUB_Y
     288/     17E :                     ;;; RET_X: ; return here
     289/     17E :                     ;;;	...
     290/     17E :                     ;;;       
     291/     17E :                     ;;; SUB_Y:
     292/     17E :                     ;;; 	CALL PUSH_BC_PCSTACK
     293/     17E :                     ;;; 	...
     294/     17E :                     ;;; 	JMP RETURN_BY_PCSTACK
     295/     17E :                     ;;; 	
     296/     17E :                     ;;;---------------------------------------------------------------------------
     297/     17E :                     PUSH_BC_PCSTACK:
     298/     17E : 2E 3E               	MVI H,up(PCSTACK)
     299/     180 : 36 00               	MVI L,0
     300/     182 : F7                  	MOV L,M
     301/     183 : 31                  	DCR L
     302/     184 : F9                  	MOV M,B
     303/     185 : 31                  	DCR L
     304/     186 : FA                  	MOV M,C
     305/     187 : D6                  	MOV C,L
     306/     188 : 36 00               	MVI L,0
     307/     18A : FA                  	MOV M,C
     308/     18B : F2                  	MOV L,C
     309/     18C : D7                  	MOV C,M
     310/     18D : 07                  	RET
     311/     18E :                     
     312/     18E :                     RETURN_BY_PCSTACK:
     313/     18E : 46 CE 01            	CALL PUSH_BC
     314/     191 : 2E 3E               	MVI H,up(PCSTACK)	; set H to Stack Page
     315/     193 : 36 00               	MVI L,0			; set HL to &SP
     316/     195 : F7                  	MOV L,M			; L=SP
     317/     196 : D7                  	MOV C,M			; C=*(SP)
     318/     197 : 30                  	INR L			; SP++
     319/     198 : 30                  	INR L			; SP++
     320/     199 : CE                  	MOV B,L			; B=new SP
     321/     19A : 36 00               	MVI L,0			; set HL to &SP
     322/     19C : F9                  	MOV M,B			; SP = B (=new SP = original SP +2)
     323/     19D : F1                  	MOV L,B			;
     324/     19E : 31                  	DCR L			; HL=original SP+1 
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 7 - 2024年08月18日 14時35分23秒


     325/     19F : CF                  	MOV B,M			; B=*(original SP+1)
     326/     1A0 : 2E 38               	MVI H,up(RETURN_BY_JMP)
     327/     1A2 : 36 7C               	MVI L,lo(RETURN_BY_JMP)
     328/     1A4 : 3E 44                	MVI M,CODE_JMP
     329/     1A6 : 30                  	INR L
     330/     1A7 : FA                  	MOV M,C			; lower byte of the return address
     331/     1A8 : 30                  	INR L
     332/     1A9 : F9                  	MOV M,B			; upper byte of the return address
     333/     1AA : 46 0C 02            	CALL POP_BC
     334/     1AD : 44 7C 38            	JMP RETURN_BY_JMP
     335/     1B0 :                     
     336/     1B0 :                     ;;;---------------------------------------------------------------------------
     337/     1B0 :                     ;;; Stack operations
     338/     1B0 :                     ;;; stack area consists of one page (256 byte)
     339/     1B0 :                     ;;; stack pointer is xx00 (1byte)
     340/     1B0 :                     ;;; stack area is xx02-xxFF (254byte)
     341/     1B0 :                     ;;; Push/Pop register pair on stack
     342/     1B0 :                     ;;; destroy: HL
     343/     1B0 :                     ;;;
     344/     1B0 :                     ;;;---------------------------------------------------------------------------
     345/     1B0 :                     PUSH_A:
     346/     1B0 : 2E 3F               	MVI H,up(STACK)		; set H to Stack Page
     347/     1B2 : 36 00               	MVI L,0			; set HL to &SP
     348/     1B4 : F7                  	MOV L,M			; L=SP
     349/     1B5 : 31                  	DCR L			;
     350/     1B6 : F8                  	MOV M,A			; (--SP)=A
     351/     1B7 : C6                  	MOV A,L
     352/     1B8 : 36 00               	MVI L,0			; HL = &SP
     353/     1BA : F8                  	MOV M,A			; write new SP
     354/     1BB : F7                  	MOV L,M			; 
     355/     1BC : C7                  	MOV A,M			; restore A
     356/     1BD : 07                  	RET
     357/     1BE :                     
     358/     1BE :                     PUSH_AB:
     359/     1BE : 2E 3F               	MVI H,up(STACK)		; set H to Stack Page
     360/     1C0 : 36 00               	MVI L,0			; set HL to &SP
     361/     1C2 : F7                  	MOV L,M			; L=SP
     362/     1C3 : 31                  	DCR L			;
     363/     1C4 : F8                  	MOV M,A			; (--SP)=A
     364/     1C5 : 31                  	DCR L			;
     365/     1C6 : F9                  	MOV M,B			; (--SP)=B
     366/     1C7 : CE                  	MOV B,L			; B=new SP (restored afterward)
     367/     1C8 : 36 00               	MVI L,0			; HL = &SP
     368/     1CA : F9                  	MOV M,B			; SP=B
     369/     1CB : F1                  	MOV L,B			; 
     370/     1CC : CF                  	MOV B,M			; restore B
     371/     1CD : 07                  	RET
     372/     1CE :                     
     373/     1CE :                     PUSH_BC:
     374/     1CE : 2E 3F               	MVI H,up(STACK)		; set H to Stack Page
     375/     1D0 : 36 00               	MVI L,0			; set HL to &SP
     376/     1D2 : F7                  	MOV L,M			; L=SP
     377/     1D3 : 31                  	DCR L			;
     378/     1D4 : F9                  	MOV M,B			; (--SP)=B
     379/     1D5 : 31                  	DCR L			;
     380/     1D6 : FA                  	MOV M,C			; (--SP)=C
     381/     1D7 : D6                  	MOV C,L			; C=new SP (restored afterward)
     382/     1D8 : 36 00               	MVI L,0			; HL = &SP
     383/     1DA : FA                  	MOV M,C			; SP=C
     384/     1DB : F2                  	MOV L,C			; 
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 8 - 2024年08月18日 14時35分23秒


     385/     1DC : D7                  	MOV C,M			; restore C
     386/     1DD : 07                  	RET
     387/     1DE :                     
     388/     1DE :                     PUSH_DE:
     389/     1DE : 2E 3F               	MVI H,up(STACK)
     390/     1E0 : 36 00               	MVI L,0
     391/     1E2 : F7                  	MOV L,M
     392/     1E3 : 31                  	DCR L
     393/     1E4 : FB                  	MOV M,D
     394/     1E5 : 31                  	DCR L
     395/     1E6 : FC                  	MOV M,E
     396/     1E7 : E6                  	MOV E,L
     397/     1E8 : 36 00               	MVI L,0
     398/     1EA : FC                  	MOV M,E
     399/     1EB : F4                  	MOV L,E
     400/     1EC : E7                  	MOV E,M
     401/     1ED : 07                  	RET
     402/     1EE :                     
     403/     1EE :                     POP_A:
     404/     1EE : 2E 3F               	MVI H,up(STACK)		; set H to Stack Page
     405/     1F0 : 36 00               	MVI L,0			; set HL to &SP
     406/     1F2 : F7                  	MOV L,M			; L=SP
     407/     1F3 : 30                  	INR L			; 
     408/     1F4 : C6                  	MOV A,L			; A=orig SP+1
     409/     1F5 : 36 00               	MVI L,0			;
     410/     1F7 : F8                  	MOV M,A			; SP++
     411/     1F8 : F0                  	MOV L,A			; 
     412/     1F9 : 31                  	DCR L			; HL= &(orig SP)
     413/     1FA : C7                  	MOV A,M			; A=(orig SP)
     414/     1FB : 07                  	RET
     415/     1FC :                     
     416/     1FC :                     POP_AB:
     417/     1FC : 2E 3F               	MVI H,up(STACK)		; set H to Stack Page
     418/     1FE : 36 00               	MVI L,0			; set HL to &SP
     419/     200 : F7                  	MOV L,M			; L=SP
     420/     201 : CF                  	MOV B,M			; B=(SP)
     421/     202 : 30                  	INR L			; SP++
     422/     203 : 30                  	INR L			; SP++
     423/     204 : C6                  	MOV A,L			; A=new SP
     424/     205 : 36 00               	MVI L,0			; set HL to &SP
     425/     207 : F8                  	MOV M,A			; SP = A (=new SP = original SP +2)
     426/     208 : F0                  	MOV L,A			;
     427/     209 : 31                  	DCR L			; HL=original SP+1 
     428/     20A : C7                  	MOV A,M			; A=(original SP+1)
     429/     20B : 07                  	RET
     430/     20C :                     
     431/     20C :                     POP_BC:
     432/     20C : 2E 3F               	MVI H,up(STACK)		; set H to Stack Page
     433/     20E : 36 00               	MVI L,0			; set HL to &SP
     434/     210 : F7                  	MOV L,M			; L=SP
     435/     211 : D7                  	MOV C,M			; C=(SP)
     436/     212 : 30                  	INR L			; SP++
     437/     213 : 30                  	INR L			; SP++
     438/     214 : CE                  	MOV B,L			; B=new SP
     439/     215 : 36 00               	MVI L,0			; set HL to &SP
     440/     217 : F9                  	MOV M,B			; SP = B (=new SP = original SP +2)
     441/     218 : F1                  	MOV L,B			;
     442/     219 : 31                  	DCR L			; HL=original SP+1 
     443/     21A : CF                  	MOV B,M			; B=(original SP+1)
     444/     21B : 07                  	RET
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 9 - 2024年08月18日 14時35分23秒


     445/     21C :                     
     446/     21C :                     POP_DE:
     447/     21C : 2E 3F               	MVI H,up(STACK)
     448/     21E : 36 00               	MVI L,0
     449/     220 : F7                  	MOV L,M
     450/     221 : E7                  	MOV E,M
     451/     222 : 30                  	INR L
     452/     223 : 30                  	INR L
     453/     224 : DE                  	MOV D,L
     454/     225 : 36 00               	MVI L,0
     455/     227 : FB                  	MOV M,D
     456/     228 : F3                  	MOV L,D
     457/     229 : 31                  	DCR L
     458/     22A : DF                  	MOV D,M
     459/     22B : 07                  	RET
     460/     22C :                     
     461/     22C :                     ;;;---------------------------------------------------------------------------
     462/     22C :                     ;;; Push/Pop REG16A
     463/     22C :                     ;;; destroy: HL
     464/     22C :                     ;;;---------------------------------------------------------------------------
     465/     22C :                     PUSH_REG16A:
     466/     22C : 2E 38               	MVI H,REGPAGE
     467/     22E : 36 5C               	MVI L,lo(REG16_TMP_REG)
     468/     230 : FA                  	MOV M,C
     469/     231 : 30                  	INR L
     470/     232 : F9                  	MOV M,B			; store BC to TMP_REG
     471/     233 :                     
     472/     233 : F0                  	MOV L,A
     473/     234 : D7                  	MOV C,M
     474/     235 : 30                  	INR L
     475/     236 : CF                  	MOV B,M			; load REG(A) to BC
     476/     237 : 46 CE 01            	CALL PUSH_BC		; push REG(A)
     477/     23A :                     
     478/     23A : 2E 38               	MVI H,REGPAGE
     479/     23C : 36 5C               	MVI L,lo(REG16_TMP_REG)
     480/     23E : D7                  	MOV C,M
     481/     23F : 30                  	INR L
     482/     240 : CF                  	MOV B,M			; restore BC from TMP_REG
     483/     241 : 07                  	RET
     484/     242 :                     	
     485/     242 :                     POP_REG16A:
     486/     242 : 2E 38               	MVI H,REGPAGE
     487/     244 : 36 5C               	MVI L,lo(REG16_TMP_REG)
     488/     246 : FA                  	MOV M,C
     489/     247 : 30                  	INR L
     490/     248 : F9                  	MOV M,B			; store BC to TMP_REG
     491/     249 :                     
     492/     249 : 46 0C 02            	CALL POP_BC		; pop REG(A) from stack
     493/     24C : 2E 38               	MVI H,REGPAGE
     494/     24E : F0                  	MOV L,A
     495/     24F : FA                  	MOV M,C
     496/     250 : 30                  	INR L
     497/     251 : F9                  	MOV M,B			; load REG(A) from BC
     498/     252 :                     
     499/     252 : 36 5C               	MVI L,lo(REG16_TMP_REG)
     500/     254 : D7                  	MOV C,M
     501/     255 : 30                  	INR L
     502/     256 : CF                  	MOV B,M			; restore BC from TMP_REG
     503/     257 : 07                  	RET
     504/     258 :                     
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 10 - 2024年08月18日 14時35分23秒


     505/     258 :                     ;;;---------------------------------------------------------------------------
     506/     258 :                     ;;; MOV_REG16D_REG16E
     507/     258 :                     ;;; REG16(D)=REG16(E)
     508/     258 :                     ;;; destroy: A, HL (H=REGPAGE)
     509/     258 :                     ;;;---------------------------------------------------------------------------
     510/     258 :                     MOV_REG16D_REG16E:
     511/     258 : 2E 38               	MVI H,REGPAGE
     512/     25A : F4                  	MOV L,E
     513/     25B : C7                  	MOV A,M
     514/     25C : F3                  	MOV L,D
     515/     25D : F8                  	MOV M,A
     516/     25E : F4                  	MOV L,E
     517/     25F : 30                  	INR L
     518/     260 : C7                  	MOV A,M
     519/     261 : F3                  	MOV L,D
     520/     262 : 30                  	INR L
     521/     263 : F8                  	MOV M,A
     522/     264 : 07                  	RET
     523/     265 :                     
     524/     265 :                     ;;;---------------------------------------------------------------------------
     525/     265 :                     ;;; MOV_REG16E_REG16D
     526/     265 :                     ;;; REG16(E)=REG16(D)
     527/     265 :                     ;;; destroy: A, HL
     528/     265 :                     ;;;---------------------------------------------------------------------------
     529/     265 :                     MOV_REG16E_REG16D:
     530/     265 : 2E 38               	MVI H,REGPAGE
     531/     267 : F3                  	MOV L,D
     532/     268 : C7                  	MOV A,M
     533/     269 : F4                  	MOV L,E
     534/     26A : F8                  	MOV M,A
     535/     26B : F3                  	MOV L,D
     536/     26C : 30                  	INR L
     537/     26D : C7                  	MOV A,M
     538/     26E : F4                  	MOV L,E
     539/     26F : 30                  	INR L
     540/     270 : F8                  	MOV M,A
     541/     271 : 07                  	RET
     542/     272 :                     
     543/     272 :                     ;;;---------------------------------------------------------------------------
     544/     272 :                     ;;; MOV_REG16B_REG16D
     545/     272 :                     ;;; REG16(B)=REG16(D)
     546/     272 :                     ;;; destroy: A, HL
     547/     272 :                     ;;;---------------------------------------------------------------------------
     548/     272 :                     MOV_REG16B_REG16D:
     549/     272 : 2E 38               	MVI H,REGPAGE
     550/     274 : F3                  	MOV L,D
     551/     275 : C7                  	MOV A,M
     552/     276 : F1                  	MOV L,B
     553/     277 : F8                  	MOV M,A
     554/     278 : F3                  	MOV L,D
     555/     279 : 30                  	INR L
     556/     27A : C7                  	MOV A,M
     557/     27B : F1                  	MOV L,B
     558/     27C : 30                  	INR L
     559/     27D : F8                  	MOV M,A
     560/     27E : 07                  	RET
     561/     27F :                     
     562/     27F :                     ;;;---------------------------------------------------------------------------
     563/     27F :                     ;;; MOV_REG16D_REG16B
     564/     27F :                     ;;; REG16(D)=REG16(B)
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 11 - 2024年08月18日 14時35分23秒


     565/     27F :                     ;;; destroy: A, HL
     566/     27F :                     ;;;---------------------------------------------------------------------------
     567/     27F :                     MOV_REG16D_REG16B:
     568/     27F : 2E 38               	MVI H,REGPAGE
     569/     281 : F1                  	MOV L,B
     570/     282 : C7                  	MOV A,M
     571/     283 : F3                  	MOV L,D
     572/     284 : F8                  	MOV M,A
     573/     285 : F1                  	MOV L,B
     574/     286 : 30                  	INR L
     575/     287 : C7                  	MOV A,M
     576/     288 : F3                  	MOV L,D
     577/     289 : 30                  	INR L
     578/     28A : F8                  	MOV M,A
     579/     28B : 07                  	RET
     580/     28C :                     
     581/     28C :                     ;;;---------------------------------------------------------------------------
     582/     28C :                     ;;; MOV_REG16B_REG16E
     583/     28C :                     ;;; REG16(B)=REG16(E)
     584/     28C :                     ;;; destroy: A, HL
     585/     28C :                     ;;;---------------------------------------------------------------------------
     586/     28C :                     MOV_REG16B_REG16E:
     587/     28C : 2E 38               	MVI H,REGPAGE
     588/     28E : F4                  	MOV L,E
     589/     28F : C7                  	MOV A,M
     590/     290 : F1                  	MOV L,B
     591/     291 : F8                  	MOV M,A
     592/     292 : F4                  	MOV L,E
     593/     293 : 30                  	INR L
     594/     294 : C7                  	MOV A,M
     595/     295 : F1                  	MOV L,B
     596/     296 : 30                  	INR L
     597/     297 : F8                  	MOV M,A
     598/     298 : 07                  	RET
     599/     299 :                     
     600/     299 :                     ;;;---------------------------------------------------------------------------
     601/     299 :                     ;;; INC_REG16D
     602/     299 :                     ;;; REG16(D)++
     603/     299 :                     ;;; destroy: B, HL (H = REGPAGE)
     604/     299 :                     ;;;---------------------------------------------------------------------------
     605/     299 :                     INC_REG16D:
     606/     299 : 2E 38               	MVI H,REGPAGE
     607/     29B : F3                  	MOV L,D			;set pointer to lower byte
     608/     29C : CF                  	MOV B,M
     609/     29D : 08                  	INR B			;increment lower byte
     610/     29E : F9                  	MOV M,B
     611/     29F : 0B                  	RNZ			;not zero then return
     612/     2A0 : 30                  	INR L			;set pointer to upper byte
     613/     2A1 : CF                  	MOV B,M
     614/     2A2 : 08                  	INR B			;increment upper byte
     615/     2A3 : F9                  	MOV M,B
     616/     2A4 : 07                  	RET
     617/     2A5 :                     
     618/     2A5 :                     ;;;---------------------------------------------------------------------------
     619/     2A5 :                     ;;; DEC_REG16D
     620/     2A5 :                     ;;; REG16(D)--
     621/     2A5 :                     ;;; destroy: B, HL
     622/     2A5 :                     ;;;---------------------------------------------------------------------------
     623/     2A5 :                     DEC_REG16D:
     624/     2A5 : 2E 38               	MVI H,REGPAGE
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 12 - 2024年08月18日 14時35分23秒


     625/     2A7 : F3                  	MOV L,D			; set pointer to lower byte
     626/     2A8 : CF                  	MOV B,M
     627/     2A9 : 08                  	INR B
     628/     2AA : 09                  	DCR B			; check if lower byte is zero
     629/     2AB : 68 B1 02            	JZ .LZERO
     630/     2AE : 09                  	DCR B			; lower byte is not zero
     631/     2AF : F9                  	MOV M,B			; then decriment and write
     632/     2B0 : 07                  	RET
     633/     2B1 :                     .LZERO				; lower byte is zero
     634/     2B1 : 09                  	DCR B
     635/     2B2 : F9                  	MOV M,B			; decriment lower byte and write
     636/     2B3 : 30                  	INR L			; set pointer to upper byte
     637/     2B4 : CF                  	MOV B,M
     638/     2B5 : 09                  	DCR B			; decriment upper byte
     639/     2B6 : F9                  	MOV M,B			; and write
     640/     2B7 : 07                  	RET
     641/     2B8 :                     	
     642/     2B8 :                     ;;;---------------------------------------------------------------------------
     643/     2B8 :                     ;;; PRINTHEX_A
     644/     2B8 :                     ;;; print ACC in HEX format
     645/     2B8 :                     ;;; print contents of ACC('0'...'F') as a character
     646/     2B8 :                     ;;; destroy: HL
     647/     2B8 :                     ;;;---------------------------------------------------------------------------
     648/     2B8 :                     PRINTHEX_A:
     649/     2B8 : 46 BE 01            	CALL PUSH_AB
     650/     2BB : F0                  	MOV L,A			; save A to L
     651/     2BC : 0A                  	RRC
     652/     2BD : 0A                  	RRC
     653/     2BE : 0A                  	RRC
     654/     2BF : 0A                  	RRC
     655/     2C0 : 24 0F               	ANI 0FH
     656/     2C2 : 3C 0A               	CPI 10
     657/     2C4 : 60 C9 02            	JC .L1			; A<10
     658/     2C7 : 04 07               	ADI 07H			; A>=10
     659/     2C9 : 04 30               .L1:	ADI 30H			;'0'
     660/     2CB : 46 40 00            	CALL PUTCH
     661/     2CE : C6                  	MOV A,L			; restore A from L
     662/     2CF : 24 0F               	ANI 0FH
     663/     2D1 : 3C 0A               	CPI 10
     664/     2D3 : 60 D8 02            	JC .L2			;A<10
     665/     2D6 : 04 07               	ADI 07H			;A>=10
     666/     2D8 : 04 30               .L2:	ADI 30H			;'0'
     667/     2DA : 46 40 00            	CALL PUTCH
     668/     2DD : 44 FC 01            	JMP  POP_AB
     669/     2E0 :                     
     670/     2E0 :                     ;;;---------------------------------------------------------------------------
     671/     2E0 :                     ;;; ISNUM_A
     672/     2E0 :                     ;;; check P1 '0' to '9' as a ascii character
     673/     2E0 :                     ;;; return: C=0 if P1 is not a number
     674/     2E0 :                     ;;;         C=1 if P1 is a number
     675/     2E0 :                     ;;;---------------------------------------------------------------------------
     676/     2E0 :                     ISNUM_A:
     677/     2E0 : 3C 30               	CPI '0'
     678/     2E2 : 60 E8 02            	JC  .FALSE		; A <'0'
     679/     2E5 : 3C 3A               	CPI '9'+1
     680/     2E7 : 07                  	RET                     ; '0'<=A<'9'+1 then C=1
     681/     2E8 :                     .FALSE:
     682/     2E8 : A0                  	ANA A			; clear Carry
     683/     2E9 : 07                  	RET			; A is not a number (C=0)
     684/     2EA :                     
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 13 - 2024年08月18日 14時35分23秒


     685/     2EA :                     ;;;----------------------------------------------------------------------------
     686/     2EA :                     ;;; ISHEX_A
     687/     2EA :                     ;;; check A is a hex digit letter ('0' to '9') or ('A' to 'F') or ('a' to 'f') 
     688/     2EA :                     ;;; return: C=0 if A is not a hex digit letter
     689/     2EA :                     ;;;         C=1 if A is a hex digit letter
     690/     2EA :                     ;;; destroy: 
     691/     2EA :                     ;;;----------------------------------------------------------------------------
     692/     2EA :                     ISHEX_A:
     693/     2EA : 3C 30               	CPI '0'
     694/     2EC : 60 02 03            	JC  .FALSE		; A <'0'
     695/     2EF : 3C 3A               	CPI '9'+1
     696/     2F1 : 23                  	RC                      ; '0'<=A<'9'+1 then C=1
     697/     2F2 :                     				; if C=0, test next chance
     698/     2F2 : 3C 41               	CPI 'A'
     699/     2F4 : 60 02 03            	JC  .FALSE		; A <'A'
     700/     2F7 : 3C 47               	CPI 'F'+1
     701/     2F9 : 23                  	RC                      ; 'A'<=A<'F'+1 then C=1
     702/     2FA :                     				; if C=0, test next chance
     703/     2FA : 3C 61               	CPI 'a'
     704/     2FC : 60 02 03            	JC  .FALSE		; A <'a'
     705/     2FF : 3C 67               	CPI 'f'+1
     706/     301 : 23                  	RC
     707/     302 :                     .FALSE:
     708/     302 : A0                  	ANA A
     709/     303 : 07                  	RET                      ; 'a'<=A<'f'+1 then C=1
     710/     304 :                     	
     711/     304 :                     ;;;----------------------------------------------------------------------------
     712/     304 :                     ;;; ISALPHA_A
     713/     304 :                     ;;; check A is an alphabet as a ascii character
     714/     304 :                     ;;; return: C=0 if A is not an alphabet
     715/     304 :                     ;;;         C=1 if A is an alphabet
     716/     304 :                     ;;;----------------------------------------------------------------------------
     717/     304 :                     ISALPHA_A:
     718/     304 : 3C 41               	CPI 'A'
     719/     306 : 60 14 03            	JC  .FALSE		; A <'A'
     720/     309 : 3C 5B               	CPI 'Z'+1
     721/     30B : 23                  	RC                      ; 'A'<=A<'Z'+1 then C=1
     722/     30C :                     				; if C=0, test next chance
     723/     30C : 3C 61               	CPI 'a'
     724/     30E : 60 14 03            	JC  .FALSE		; A <'a'
     725/     311 : 3C 7B               	CPI 'z'+1
     726/     313 : 23                  	RC
     727/     314 :                     .FALSE:
     728/     314 : A0                  	ANA A
     729/     315 : 07                  	RET                      ; 'a'<=A<'z'+1 then C=1
     730/     316 :                     
     731/     316 :                     	
     732/     316 :                     ;;;---------------------------------------------------------------------------
     733/     316 :                     ;;; CTOI_A
     734/     316 :                     ;;; convert character ('0-9','a-f','A-F') to value 0000 ... 1111
     735/     316 :                     ;;; no error check
     736/     316 :                     ;;; input: A
     737/     316 :                     ;;; output: A
     738/     316 :                     ;;;---------------------------------------------------------------------------
     739/     316 :                     CTOI_A:
     740/     316 : 14 30               	SUI 30H			; A=A-30H
     741/     318 : 3C 0A               	CPI 10
     742/     31A : 23                  	RC			; return if A-30H <10
     743/     31B : 24 1F               	ANI 1FH
     744/     31D : 14 07               	SUI 07H
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 14 - 2024年08月18日 14時35分23秒


     745/     31F : 07                  	RET
     746/     320 :                     
     747/     320 :                     ;;;----------------------------------------------------------------------------
     748/     320 :                     ;;; Subroutines for memory operation
     749/     320 :                     ;;;----------------------------------------------------------------------------
     750/     320 :                     ;;;---------------------------------------------------------------------------
     751/     320 :                     ;;; MOV_A_MEMREG16D
     752/     320 :                     ;;; A = *REG(D)
     753/     320 :                     ;;; destroy: HL
     754/     320 :                     ;;;---------------------------------------------------------------------------
     755/     320 :                     MOV_A_MEMREG16D:
     756/     320 : 46 CE 01            	CALL PUSH_BC
     757/     323 : 2E 38               	MVI H,REGPAGE
     758/     325 : F3                  	MOV L,D
     759/     326 : D7                  	MOV C,M
     760/     327 : 30                  	INR L
     761/     328 : CF                  	MOV B,M
     762/     329 : E9                  	MOV H,B
     763/     32A : F2                  	MOV L,C
     764/     32B : C7                  	MOV A,M
     765/     32C : 44 0C 02            	JMP POP_BC
     766/     32F :                     
     767/     32F :                     ;;;---------------------------------------------------------------------------
     768/     32F :                     ;;; MOV_MEMREG16D_A
     769/     32F :                     ;;; *REG(D) = A
     770/     32F :                     ;;; destroy: HL
     771/     32F :                     ;;;---------------------------------------------------------------------------
     772/     32F :                     MOV_MEMREG16D_A:
     773/     32F : 46 CE 01            	CALL PUSH_BC
     774/     332 : 2E 38               	MVI H,REGPAGE
     775/     334 : F3                  	MOV L,D
     776/     335 : D7                  	MOV C,M
     777/     336 : 30                  	INR L
     778/     337 : CF                  	MOV B,M
     779/     338 : E9                  	MOV H,B
     780/     339 : F2                  	MOV L,C
     781/     33A : F8                  	MOV M,A
     782/     33B : 44 0C 02            	JMP POP_BC
     783/     33E :                     	
     784/     33E :                     ;;;----------------------------------------------------------------------------
     785/     33E :                     ;;; MOV_BC_MEMREG16D
     786/     33E :                     ;;; BC = *REG(D)
     787/     33E :                     ;;; destroy: HL
     788/     33E :                     ;;;----------------------------------------------------------------------------
     789/     33E :                     MOV_BC_MEMREG16D:
     790/     33E : 46 DE 01            	CALL PUSH_DE
     791/     341 : 2E 38               	MVI H,REGPAGE
     792/     343 : F3                  	MOV L,D
     793/     344 : E7                  	MOV E,M			;E=REG(D) lower byte
     794/     345 : 30                  	INR L
     795/     346 : DF                  	MOV D,M			;D=REG(D) upper byte
     796/     347 : EB                  	MOV H,D			;HL=REG(D)
     797/     348 : F4                  	MOV L,E
     798/     349 : D7                  	MOV C,M			;C=*REG(D) lower byte
     799/     34A : 30                  	INR L			;HL++
     800/     34B : 48 4F 03            	JNZ .L1
     801/     34E : 28                  	INR H
     802/     34F :                     .L1:
     803/     34F : CF                  	MOV B,M			;B=*REG(D) upper byte
     804/     350 : 44 1C 02            	JMP POP_DE
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 15 - 2024年08月18日 14時35分23秒


     805/     353 :                     
     806/     353 :                     ;;;----------------------------------------------------------------------------
     807/     353 :                     ;;; MOV_MEMREG16D_BC
     808/     353 :                     ;;;*REG(D) = BC
     809/     353 :                     ;;; destroy: HL
     810/     353 :                     ;;;----------------------------------------------------------------------------
     811/     353 :                     MOV_MEMREG16D_BC:
     812/     353 : 46 DE 01            	CALL PUSH_DE
     813/     356 : 2E 38               	MVI H,REGPAGE
     814/     358 : F3                  	MOV L,D			; HL=&REG(D)
     815/     359 : E7                  	MOV E,M			; E=REG(D) lower byte
     816/     35A : 30                  	INR L			;
     817/     35B : DF                  	MOV D,M			; D=REG(D) upper byte
     818/     35C : EB                  	MOV H,D			; HL=REG(D)
     819/     35D : F4                  	MOV L,E			; 
     820/     35E : FA                  	MOV M,C			; *REG(D) = C lower byte
     821/     35F : 30                  	INR L			;
     822/     360 : 48 64 03            	JNZ .L1
     823/     363 : 28                  	INR H
     824/     364 :                     .L1:
     825/     364 : F9                  	MOV M,B			; *REG(D) = B upper byte
     826/     365 : 44 1C 02            	JMP POP_DE
     827/     368 :                     
     828/     368 :                     ;;;----------------------------------------------------------------------------
     829/     368 :                     ;;; MOV_REG16E_MEMREG16D
     830/     368 :                     ;;; REG(E) = *REG(D)
     831/     368 :                     ;;; 
     832/     368 :                     ;;; destroy: HL
     833/     368 :                     ;;;----------------------------------------------------------------------------
     834/     368 :                     MOV_REG16E_MEMREG16D:
     835/     368 : 46 CE 01            	CALL PUSH_BC
     836/     36B : 46 DE 01            	CALL PUSH_DE
     837/     36E : 2E 38               	MVI H,REGPAGE
     838/     370 : F3                  	MOV L,D
     839/     371 : E7                  	MOV E,M
     840/     372 : 30                  	INR L
     841/     373 : DF                  	MOV D,M			; DE=REG(D)
     842/     374 : EB                  	MOV H,D
     843/     375 : F4                  	MOV L,E			; HL=REG(D)
     844/     376 : D7                  	MOV C,M			; C=*REG(D) lower byte
     845/     377 : 30                  	INR L
     846/     378 : 48 7C 03            	JNZ .L1
     847/     37B : 28                  	INR H			; HL++
     848/     37C :                     .L1:
     849/     37C : CF                  	MOV B,M			; B=*REG(D) upper byte
     850/     37D : 46 1C 02            	CALL POP_DE		; restore DE
     851/     380 : 2E 38               	MVI H,REGPAGE
     852/     382 : F4                  	MOV L,E			; L=REG(E)
     853/     383 : FA                  	MOV M,C			; REG(E) lower byte =C
     854/     384 : 30                  	INR L
     855/     385 : F9                  	MOV M,B			; REG(E) upper byte =B
     856/     386 :                     
     857/     386 : 44 0C 02            	JMP POP_BC
     858/     389 :                     
     859/     389 :                     ;;;----------------------------------------------------------------------------
     860/     389 :                     ;;; MOV_MEMREG16D_REG16E
     861/     389 :                     ;;; *REG(D) = REG(E) 
     862/     389 :                     ;;; 
     863/     389 :                     ;;; destroy: HL
     864/     389 :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 16 - 2024年08月18日 14時35分23秒


     865/     389 :                     MOV_MEMREG16D_REG16E:	
     866/     389 : 46 CE 01            	CALL PUSH_BC
     867/     38C : 46 DE 01            	CALL PUSH_DE
     868/     38F : 2E 38               	MVI H,REGPAGE
     869/     391 : F4                  	MOV L,E
     870/     392 : D7                  	MOV C,M
     871/     393 : 30                  	INR L
     872/     394 : CF                  	MOV B,M			;BC=REG(E)
     873/     395 :                     
     874/     395 : F3                  	MOV L,D
     875/     396 : E7                  	MOV E,M
     876/     397 : 30                  	INR L
     877/     398 : DF                  	MOV D,M			;DE=REG(D)
     878/     399 :                     
     879/     399 : EB                  	MOV H,D
     880/     39A : F4                  	MOV L,E			;HL=DE(=REG(D))
     881/     39B :                     
     882/     39B : FA                  	MOV M,C			; *REG(D)=C (lower byte)
     883/     39C : 30                  	INR L
     884/     39D : 48 A1 03            	JNZ .L1
     885/     3A0 : 28                  	INR H
     886/     3A1 :                     .L1:
     887/     3A1 : F9                  	MOV M,B			; *REG(D)=B (upper byte)
     888/     3A2 :                     
     889/     3A2 : 46 1C 02            	CALL POP_DE
     890/     3A5 : 44 0C 02            	JMP POP_BC
     891/     3A8 :                     
     892/     3A8 :                     ;;;----------------------------------------------------------------------------
     893/     3A8 :                     ;;; GETLINE_MEMREG16D
     894/     3A8 :                     ;;; Get line from serial input and store to M(REG(D))
     895/     3A8 :                     ;;; The value of REG(D) does not change
     896/     3A8 :                     ;;;----------------------------------------------------------------------------
     897/     3A8 :                     GETLINE_MEMREG16D:	
     898/     3A8 : 46 CE 01            	CALL PUSH_BC
     899/     3AB : 46 DE 01            	CALL PUSH_DE
     900/     3AE :                     
     901/     3AE : 26 52               	MVI E,lo(REG16_TMP)
     902/     3B0 : 46 65 02            	CALL MOV_REG16E_REG16D	; REG(TMP)=REG(INDEX)
     903/     3B3 :                     
     904/     3B3 :                     .LOOP:
     905/     3B3 : 46 4A 00            	CALL GETCH
     906/     3B6 : 3C 0D               	CPI CR
     907/     3B8 : 48 C1 03            	JNZ .L1
     908/     3BB :                     ;;; 	CPI LF
     909/     3BB :                     ;;; 	JNZ .L1
     910/     3BB : 46 60 00            	CALL PRINT_CRLF
     911/     3BE : 44 F2 03            	JMP .EXIT
     912/     3C1 :                     .L1:
     913/     3C1 : 3C 08               	CPI 08H			; backspace
     914/     3C3 : 48 E6 03            	JNZ .INSERTCHAR
     915/     3C6 :                     
     916/     3C6 : 26 52               	MVI E,lo(REG16_TMP)
     917/     3C8 : 46 FC 06            	CALL CMP_UNSIGNED_REG16D_REG16E
     918/     3CB : 48 D1 03            	JNZ .BS			; do BS if REG(D)!=REG(TMP)
     919/     3CE : 44 B3 03            	JMP .LOOP		; ignore BS
     920/     3D1 :                     .BS:				; delete a character on the cursor
     921/     3D1 : 46 A5 02            	CALL DEC_REG16D		; REG(D)--
     922/     3D4 :                     .L1_NEXT:			; delete a character on the cursor
     923/     3D4 : (MACRO)              	PUTCHAR 08H		; put backspace
     923/     3D4 : 06 08                       MVI  A,08H
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 17 - 2024年08月18日 14時35分23秒


     923/     3D6 : 46 40 00                    CALL PUTCH
     924/     3D9 : (MACRO)              	PUTCHAR ' '
     924/     3D9 : 06 20                       MVI  A,' '
     924/     3DB : 46 40 00                    CALL PUTCH
     925/     3DE : (MACRO)              	PUTCHAR 08H		; put backspace
     925/     3DE : 06 08                       MVI  A,08H
     925/     3E0 : 46 40 00                    CALL PUTCH
     926/     3E3 : 44 B3 03            	JMP .LOOP
     927/     3E6 :                     .INSERTCHAR:
     928/     3E6 : 46 40 00            	CALL PUTCH
     929/     3E9 : 46 2F 03            	CALL MOV_MEMREG16D_A
     930/     3EC : 46 99 02            	CALL INC_REG16D		; *REG(D)++ = A
     931/     3EF :                     
     932/     3EF : 44 B3 03            	JMP .LOOP
     933/     3F2 :                     .EXIT:
     934/     3F2 : A8                  	XRA A
     935/     3F3 : 46 2F 03            	CALL MOV_MEMREG16D_A
     936/     3F6 : 46 99 02            	CALL INC_REG16D
     937/     3F9 : 46 2F 03            	CALL MOV_MEMREG16D_A
     938/     3FC :                     
     939/     3FC : 46 58 02            	CALL MOV_REG16D_REG16E	; restore REG(INDEX)
     940/     3FF : 46 1C 02            	CALL POP_DE
     941/     402 : 44 0C 02            	JMP  POP_BC
     942/     405 :                     
     943/     405 :                     ;;;----------------------------------------------------------------------------
     944/     405 :                     ;;; GETHEXNUMBER_MEMREG16D_REG16E
     945/     405 :                     ;;;----------------------------------------------------------------------------
     946/     405 :                     GETHEXNUMBER_MEMREG16D_REG16E:
     947/     405 : 46 BE 01            	CALL PUSH_AB
     948/     408 : 46 12 05            	CALL CLEAR_REG16E
     949/     40B :                     .LOOP:
     950/     40B : 46 20 03            	CALL MOV_A_MEMREG16D
     951/     40E : 46 EA 02            	CALL ISHEX_A
     952/     411 : 40 2E 04            	JNC .EXIT
     953/     414 : 46 99 02            	CALL INC_REG16D
     954/     417 : 46 16 03            	CALL CTOI_A
     955/     41A : C8                  	MOV  B,A
     956/     41B : C4                  	MOV  A,E
     957/     41C : 46 99 05            	CALL MUL2_REG16A
     958/     41F : 46 99 05            	CALL MUL2_REG16A
     959/     422 : 46 99 05            	CALL MUL2_REG16A
     960/     425 : 46 99 05            	CALL MUL2_REG16A
     961/     428 : 46 61 05            	CALL ADD_REG16A_B
     962/     42B : 44 0B 04            	JMP .LOOP
     963/     42E :                     .EXIT:
     964/     42E : 44 FC 01            	JMP POP_AB
     965/     431 :                     	
     966/     431 :                     ;;;----------------------------------------------------------------------------
     967/     431 :                     ;;; GETNUMBER_MEMREG16D_REG16E
     968/     431 :                     ;;; Read a decimal or hexadecimal number in the string and store to register
     969/     431 :                     ;;; Read string from *REG16(D) and set a number to REG16(E)
     970/     431 :                     ;;; REG16(D) is incremented to the character which is not a number.
     971/     431 :                     ;;; Hexadecimal number begins with 0 (ex. 0A123).
     972/     431 :                     ;;; destroy: HL
     973/     431 :                     ;;; TMP: working for multiply by 10
     974/     431 :                     ;;;----------------------------------------------------------------------------
     975/     431 :                     GETNUMBER_MEMREG16D_REG16E:
     976/     431 : 46 20 03            	CALL MOV_A_MEMREG16D	; A = *REG16(D)
     977/     434 : 3C 30               	CPI '0'
     978/     436 : 68 05 04            	JZ GETHEXNUMBER_MEMREG16D_REG16E  ;; if start with '0' then get HEX
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 18 - 2024年08月18日 14時35分23秒


     979/     439 :                     
     980/     439 : 46 B0 01            	CALL PUSH_A
     981/     43C : 46 CE 01            	CALL PUSH_BC
     982/     43F : 46 12 05            	CALL CLEAR_REG16E
     983/     442 : D3                  	MOV  C,D		; save D to C
     984/     443 :                     .LOOP:
     985/     443 : DA                  	MOV  D,C		; restore D from C
     986/     444 : C2                  	MOV  A,C
     987/     445 : 46 20 03            	CALL MOV_A_MEMREG16D
     988/     448 : 46 E0 02            	CALL ISNUM_A
     989/     44B : 40 74 04            	JNC .EXIT
     990/     44E : 46 99 02            	CALL INC_REG16D
     991/     451 : 46 16 03            	CALL CTOI_A
     992/     454 : C8                  	MOV  B,A
     993/     455 : C4                  	MOV  A,E
     994/     456 : 46 99 05            	CALL MUL2_REG16A
     995/     459 : 1E 5A               	MVI  D,lo(REG16_TMP_GETNUM)
     996/     45B : 46 58 02            	CALL MOV_REG16D_REG16E 	; TMP=REG(E)*2
     997/     45E : C4                  	MOV  A,E
     998/     45F : 46 99 05            	CALL MUL2_REG16A
     999/     462 : 46 99 05            	CALL MUL2_REG16A	; REG(E)=REG(E)*8
    1000/     465 :                     	
    1001/     465 : 1E 5A               	MVI  D,lo(REG16_TMP_GETNUM)
    1002/     467 : 46 6D 05            	CALL ADD_REG16D_REG16E	; TMP=REG(E)*10
    1003/     46A : C3                  	MOV  A,D
    1004/     46B : 46 61 05            	CALL ADD_REG16A_B	; TMP=REG(E)*10+B
    1005/     46E : 46 65 02            	CALL MOV_REG16E_REG16D
    1006/     471 : 44 43 04            	JMP .LOOP
    1007/     474 :                     .EXIT:
    1008/     474 : 46 0C 02            	CALL POP_BC
    1009/     477 : 44 EE 01            	JMP  POP_A
    1010/     47A :                     
    1011/     47A :                     ;;;----------------------------------------------------------------------------
    1012/     47A :                     ;;; Monitor Command
    1013/     47A :                     ;;; .c         :    Clear memory
    1014/     47A :                     ;;; .dxxxx,yyyy:    Dump memory
    1015/     47A :                     ;;;----------------------------------------------------------------------------
    1016/     47A :                     VTL_MONITORCMD:
    1017/     47A : 46 99 02            	CALL INC_REG16D
    1018/     47D : 46 20 03            	CALL MOV_A_MEMREG16D
    1019/     480 :                     
    1020/     480 : 3C 63               	CPI 'c'		; clear program area
    1021/     482 : 68 8D 04            	JZ  MEM_CLEAR
    1022/     485 : 3C 64               	CPI 'd'		; dump MEMORY
    1023/     487 : 68 AF 04            	JZ  MEM_DUMP
    1024/     48A : 44 D8 07            	JMP VTL_MAIN
    1025/     48D :                     
    1026/     48D :                     MEM_CLEAR:	
    1027/     48D : 46 CE 01            	CALL PUSH_BC
    1028/     490 : (MACRO)              	LXI_HL PROGRAM_START
    1028/     490 : 2E 10                       MVI H,up(PROGRAM_START)
    1028/     492 : 36 00                       MVI L,lo(PROGRAM_START)
    1029/     494 : (MACRO)              	LXI_BC PROGRAM_END
    1029/     494 : 0E 37                       MVI B,up(PROGRAM_END)
    1029/     496 : 16 FF                       MVI C,lo(PROGRAM_END)
    1030/     498 :                     .LOOP:
    1031/     498 : 3E 00               	MVI M,0
    1032/     49A : 30                  	INR L
    1033/     49B : 48 9F 04            	JNZ .L1
    1034/     49E : 28                  	INR H
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 19 - 2024年08月18日 14時35分23秒


    1035/     49F : C5                  .L1:	MOV A,H
    1036/     4A0 : B9                  	CMP B
    1037/     4A1 : 48 98 04            	JNZ .LOOP
    1038/     4A4 : C6                  	MOV A,L
    1039/     4A5 : BA                  	CMP C
    1040/     4A6 : 48 98 04            	JNZ  .LOOP
    1041/     4A9 : 46 0C 02            	CALL POP_BC
    1042/     4AC : 44 D8 07            	JMP  VTL_MAIN
    1043/     4AF :                     
    1044/     4AF :                     MEM_DUMP:	
    1045/     4AF : 46 99 02            	CALL INC_REG16D
    1046/     4B2 :                     	
    1047/     4B2 : 26 6A               	MVI E,lo(REG16_MON_TMP)
    1048/     4B4 : 46 05 04            	CALL GETHEXNUMBER_MEMREG16D_REG16E
    1049/     4B7 : 46 20 03            	CALL MOV_A_MEMREG16D
    1050/     4BA : A0                  	ANA A
    1051/     4BB : 68 C9 04            	JZ  .L1
    1052/     4BE : 46 99 02            	CALL INC_REG16D
    1053/     4C1 : 26 6C               	MVI E,lo(REG16_MON_TMP2)
    1054/     4C3 : 46 05 04            	CALL GETHEXNUMBER_MEMREG16D_REG16E
    1055/     4C6 : 44 DA 04            	JMP .L2
    1056/     4C9 :                     .L1:
    1057/     4C9 : 26 6C               	MVI E,lo(REG16_MON_TMP2)
    1058/     4CB : 1E 6A               	MVI D,lo(REG16_MON_TMP)
    1059/     4CD : 46 65 02            	CALL MOV_REG16E_REG16D
    1060/     4D0 : F4                  	MOV L,E
    1061/     4D1 : C7                  	MOV A,M
    1062/     4D2 : 04 FF               	ADI 0FFH
    1063/     4D4 : F8                  	MOV M,A
    1064/     4D5 : 30                  	INR L
    1065/     4D6 : C7                  	MOV A,M
    1066/     4D7 : 0C 00               	ACI 00H
    1067/     4D9 : F8                  	MOV M,A			; REG(MOMTMP2)=REG(MONTMP)+0FFH
    1068/     4DA :                     	
    1069/     4DA :                     .L2:
    1070/     4DA : 1E 6A               	MVI D,lo(REG16_MON_TMP)
    1071/     4DC : 26 6C               	MVI E,lo(REG16_MON_TMP2)
    1072/     4DE :                     .LOOP1:
    1073/     4DE : 46 E8 0D            	CALL PRINTHEX_REG16D
    1074/     4E1 : (MACRO)              	PUTCHAR ':'
    1074/     4E1 : 06 3A                       MVI  A,':'
    1074/     4E3 : 46 40 00                    CALL PUTCH
    1075/     4E6 :                     .LOOP2:
    1076/     4E6 : (MACRO)              	PUTCHAR ' '
    1076/     4E6 : 06 20                       MVI  A,' '
    1076/     4E8 : 46 40 00                    CALL PUTCH
    1077/     4EB : 46 20 03            	CALL MOV_A_MEMREG16D
    1078/     4EE : 46 B8 02            	CALL PRINTHEX_A
    1079/     4F1 : 46 FC 06            	CALL CMP_UNSIGNED_REG16D_REG16E
    1080/     4F4 : 68 D8 07            	JZ   VTL_MAIN	          ;  exit if REG16(TMP)==REG16(TMP2)
    1081/     4F7 : 46 99 02            	CALL INC_REG16D
    1082/     4FA : 2E 38               	MVI  H,REGPAGE
    1083/     4FC : F3                  	MOV  L,D
    1084/     4FD : C7                  	MOV  A,M
    1085/     4FE : 24 0F               	ANI  0FH
    1086/     500 : 48 E6 04            	JNZ .LOOP2
    1087/     503 : 46 60 00            	CALL PRINT_CRLF
    1088/     506 : 44 DE 04            	JMP .LOOP1
    1089/     509 :                     
    1090/     509 :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 20 - 2024年08月18日 14時35分23秒


    1091/     509 :                     ;;; Subroutines for REG16 (16bit registars)
    1092/     509 :                     ;;;----------------------------------------------------------------------------
    1093/     509 :                     ;;;----------------------------------------------------------------------------
    1094/     509 :                     ;;; CLEAR_REG16D
    1095/     509 :                     ;;; REG16(D) = 0
    1096/     509 :                     ;;; destroy: HL (H=REGPAGE)
    1097/     509 :                     ;;;----------------------------------------------------------------------------
    1098/     509 :                     CLEAR_REG16D:
    1099/     509 : 2E 38               	MVI H,REGPAGE
    1100/     50B : F3                  	MOV L,D
    1101/     50C : 3E 00               	MVI M,0
    1102/     50E : 30                  	INR L
    1103/     50F : 3E 00               	MVI M,0
    1104/     511 : 07                  	RET
    1105/     512 :                     
    1106/     512 :                     CLEAR_REG16E:
    1107/     512 : 2E 38               	MVI H,REGPAGE
    1108/     514 : F4                  	MOV L,E
    1109/     515 : 3E 00               	MVI M,0
    1110/     517 : 30                  	INR L
    1111/     518 : 3E 00               	MVI M,0
    1112/     51A : 07                  	RET
    1113/     51B :                     
    1114/     51B :                     CLEAR_REG16L:
    1115/     51B : 2E 38               	MVI H,REGPAGE
    1116/     51D : 3E 00               	MVI M,0
    1117/     51F : 30                  	INR L
    1118/     520 : 3E 00               	MVI M,0
    1119/     522 : 07                  	RET
    1120/     523 :                     
    1121/     523 :                     ;;;----------------------------------------------------------------------------
    1122/     523 :                     ;;; CTOREG16NUM_A
    1123/     523 :                     ;;; return lower byte of the address of REG16_x, (x=A to Z)
    1124/     523 :                     ;;; no error check
    1125/     523 :                     ;;;----------------------------------------------------------------------------
    1126/     523 :                     CTOREG16NUM_A:
    1127/     523 : 24 5F               	ANI 5FH			; toupper
    1128/     525 : 14 41               	SUI 'A'
    1129/     527 : 02                  	RLC
    1130/     528 : 04 02               	ADI lo(REG16_A_TO_Z)
    1131/     52A : 07                  	RET
    1132/     52B :                     
    1133/     52B :                     ;;;----------------------------------------------------------------------------
    1134/     52B :                     ;;; MOV_REG16D_8BIT_A
    1135/     52B :                     ;;; REG16(D) = A
    1136/     52B :                     ;;; destroy: HL
    1137/     52B :                     ;;;----------------------------------------------------------------------------
    1138/     52B :                     MOV_REG16D_8BIT_A:
    1139/     52B : 2E 38               	MVI H,REGPAGE
    1140/     52D : F3                  	MOV L,D
    1141/     52E : F8                  	MOV M,A
    1142/     52F : 30                  	INR L
    1143/     530 : 3E 00               	MVI M,0
    1144/     532 : 07                  	RET
    1145/     533 :                     
    1146/     533 :                     ;;;----------------------------------------------------------------------------
    1147/     533 :                     ;;; MOV_REG16D_BC
    1148/     533 :                     ;;; REG16(D) = BC
    1149/     533 :                     ;;; destroy: HL
    1150/     533 :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 21 - 2024年08月18日 14時35分23秒


    1151/     533 :                     MOV_REG16D_BC:
    1152/     533 : 2E 38               	MVI H,REGPAGE
    1153/     535 : F3                  	MOV L,D
    1154/     536 : FA                  	MOV M,C
    1155/     537 : 30                  	INR L
    1156/     538 : F9                  	MOV M,B
    1157/     539 : 07                  	RET
    1158/     53A :                     
    1159/     53A :                     ;;;----------------------------------------------------------------------------
    1160/     53A :                     ;;; MOV_BC_REG16D
    1161/     53A :                     ;;; BC = REG16(D)
    1162/     53A :                     ;;; destroy: HL
    1163/     53A :                     ;;;----------------------------------------------------------------------------
    1164/     53A :                     MOV_BC_REG16D:
    1165/     53A : F3                  	MOV L,D
    1166/     53B :                     MOV_BC_REG16L:
    1167/     53B : 2E 38               	MVI H,REGPAGE
    1168/     53D : D7                  	MOV C,M
    1169/     53E : 30                  	INR L
    1170/     53F : CF                  	MOV B,M
    1171/     540 : 07                  	RET
    1172/     541 :                     	
    1173/     541 :                     ;;;----------------------------------------------------------------------------
    1174/     541 :                     ;;; GETSIGN_REG16D
    1175/     541 :                     ;;; Get a sign of REG(D) and set Carry flag
    1176/     541 :                     ;;; destroy: HL,A (H=REGPAGE)
    1177/     541 :                     ;;;----------------------------------------------------------------------------
    1178/     541 :                     GETSIGN_REG16D:
    1179/     541 : 2E 38               	MVI H,REGPAGE
    1180/     543 : F3                  	MOV L,D
    1181/     544 : 30                  	INR L
    1182/     545 : C7                  	MOV A,M
    1183/     546 : 12                  	RAL
    1184/     547 : 07                  	RET
    1185/     548 :                     	
    1186/     548 :                     ;;;----------------------------------------------------------------------------
    1187/     548 :                     ;;; COMPLEMENT2_REG16D
    1188/     548 :                     ;;; make 2's complement
    1189/     548 :                     ;;; REG16(D) = (not REG16(D)) + 1
    1190/     548 :                     ;;; destroy: HL,A,B
    1191/     548 :                     ;;;----------------------------------------------------------------------------
    1192/     548 :                     COMPLEMENT2_REG16D:
    1193/     548 : 2E 38               	MVI H,REGPAGE
    1194/     54A : F3                  	MOV L,D
    1195/     54B : C7                  	MOV A,M
    1196/     54C : 2C FF               	XRI 0FFH
    1197/     54E : F8                  	MOV M,A			; (HL)=not(HL) lower byte
    1198/     54F : 30                  	INR L
    1199/     550 : C7                  	MOV A,M
    1200/     551 : 2C FF               	XRI 0FFH
    1201/     553 : F8                  	MOV M,A			; (HL)=not(HL) upper byte
    1202/     554 : 44 99 02            	JMP INC_REG16D		; (HL)=(HL)+1
    1203/     557 :                     
    1204/     557 :                     ;;;----------------------------------------------------------------------------
    1205/     557 :                     ;;; ISZERO_REG16D
    1206/     557 :                     ;;; return:
    1207/     557 :                     ;;; 	Z = 1, REG16(D) == 0
    1208/     557 :                     ;;;     Z = 0, otherwise
    1209/     557 :                     ;;; destroy: A, HL
    1210/     557 :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 22 - 2024年08月18日 14時35分23秒


    1211/     557 :                     ISZERO_REG16D:
    1212/     557 : F3                  	MOV L,D
    1213/     558 :                     ISZERO_REG16L:
    1214/     558 : 2E 38               	MVI H,REGPAGE
    1215/     55A : C7                  	MOV A,M
    1216/     55B : A0                  	ANA A
    1217/     55C : 0B                  	RNZ			; Z = 0 (A!=0)
    1218/     55D : 30                  	INR L
    1219/     55E : C7                  	MOV A,M
    1220/     55F : A0                  	ANA A			; Z = (A==0) ? 1:0
    1221/     560 : 07                  	RET
    1222/     561 :                     	
    1223/     561 :                     ;;;----------------------------------------------------------------------------
    1224/     561 :                     ;;; ADD_REG16A_B
    1225/     561 :                     ;;; REG16(A) = REG16(A) + B
    1226/     561 :                     ;;; Carry set if overflow
    1227/     561 :                     ;;; destroy: A, HL
    1228/     561 :                     ;;;----------------------------------------------------------------------------
    1229/     561 :                     ADD_REG16A_B:
    1230/     561 : 2E 38               	MVI H,REGPAGE
    1231/     563 : F0                  	MOV L,A
    1232/     564 : C1                  	MOV A,B
    1233/     565 : 87                  	ADD M
    1234/     566 : F8                  	MOV M,A
    1235/     567 : 30                  	INR L
    1236/     568 : 06 00               	MVI A,00H
    1237/     56A : 8F                  	ADC M
    1238/     56B : F8                  	MOV M,A
    1239/     56C : 07                  	RET
    1240/     56D :                     
    1241/     56D :                     ;;;----------------------------------------------------------------------------
    1242/     56D :                     ;;; ADD_REG16D_REG16E
    1243/     56D :                     ;;; REG16(D) = REG16(D) + REG16(E)
    1244/     56D :                     ;;; Carry set if overflow
    1245/     56D :                     ;;; destroy: A, HL
    1246/     56D :                     ;;;----------------------------------------------------------------------------
    1247/     56D :                     ADD_REG16D_REG16E:
    1248/     56D : 46 CE 01            	CALL PUSH_BC	
    1249/     570 : 2E 38               	MVI H,REGPAGE
    1250/     572 : F4                  	MOV L,E
    1251/     573 : D7                  	MOV C,M
    1252/     574 : 30                  	INR L
    1253/     575 : CF                  	MOV B,M			; BC=REG16(E)
    1254/     576 :                     
    1255/     576 : F3                  	MOV L,D
    1256/     577 : C2                  	MOV A,C
    1257/     578 : 87                  	ADD M
    1258/     579 : F8                  	MOV M,A
    1259/     57A : 30                  	INR L
    1260/     57B : C1                  	MOV A,B
    1261/     57C : 8F                  	ADC M
    1262/     57D : F8                  	MOV M,A
    1263/     57E : 44 0C 02            	JMP POP_BC		; POP does not affect to Carry
    1264/     581 :                     
    1265/     581 :                     ;;;----------------------------------------------------------------------------
    1266/     581 :                     ;;; SUB_REG16D_REG16E
    1267/     581 :                     ;;; REG16(D) = REG16(D) - REG16(E)
    1268/     581 :                     ;;; destroy: A, HL
    1269/     581 :                     ;;;----------------------------------------------------------------------------
    1270/     581 :                     SUB_REG16D_REG16E:
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 23 - 2024年08月18日 14時35分23秒


    1271/     581 : 46 CE 01            	CALL PUSH_BC	
    1272/     584 : 2E 38               	MVI H,REGPAGE
    1273/     586 : F3                  	MOV L,D
    1274/     587 : D7                  	MOV C,M
    1275/     588 : 30                  	INR L
    1276/     589 : CF                  	MOV B,M			; BC=REG(D)
    1277/     58A :                     
    1278/     58A : F4                  	MOV L,E
    1279/     58B : C2                  	MOV A,C
    1280/     58C : 97                  	SUB M
    1281/     58D : D0                  	MOV C,A			; C=REG(D)-REG(E) (lower byte)
    1282/     58E :                     
    1283/     58E : 30                  	INR L
    1284/     58F : C1                  	MOV A,B
    1285/     590 : 9F                  	SBB M
    1286/     591 : C8                  	MOV B,A			; B=REG(D)-REG(E)-carry (upper byte)
    1287/     592 :                     	
    1288/     592 : F3                  	MOV L,D			; write back result to REG(D)
    1289/     593 : FA                  	MOV M,C
    1290/     594 : 30                  	INR L
    1291/     595 : F9                  	MOV M,B
    1292/     596 :                     	
    1293/     596 : 44 0C 02            	JMP POP_BC		; POP does not affect to Carry
    1294/     599 :                     
    1295/     599 :                     ;;;----------------------------------------------------------------------------
    1296/     599 :                     ;;; MUL2_REG16A
    1297/     599 :                     ;;; REG16(A) = REG16(A)*2
    1298/     599 :                     ;;; C=1 if overflow
    1299/     599 :                     ;;; destroy: HL
    1300/     599 :                     ;;;----------------------------------------------------------------------------
    1301/     599 :                     MUL2_REG16A:
    1302/     599 : 2E 38               	MVI H,REGPAGE
    1303/     59B : F0                  	MOV L,A
    1304/     59C : A0                  	ANA A			; clear Carry
    1305/     59D : C7                  	MOV A,M
    1306/     59E : 12                  	RAL			; {C,A[7:0]}<={A[7:0],C}
    1307/     59F : F8                  	MOV M,A
    1308/     5A0 :                     
    1309/     5A0 : 30                  	INR L
    1310/     5A1 : C7                  	MOV A,M
    1311/     5A2 : 12                  	RAL			; {C,A[7:0]}<={A[7:0],C}
    1312/     5A3 : F8                  	MOV M,A
    1313/     5A4 : 31                  	DCR L			; DCR does not affect Carry
    1314/     5A5 : C6                  	MOV A,L			; restore A
    1315/     5A6 : 07                  	RET
    1316/     5A7 :                     
    1317/     5A7 :                     ;;;----------------------------------------------------------------------------
    1318/     5A7 :                     ;;; DIV2_REG16A
    1319/     5A7 :                     ;;; REG16(A) = REG16(A)/2
    1320/     5A7 :                     ;;; C=1 if LSB is 1;
    1321/     5A7 :                     ;;; destroy: HL
    1322/     5A7 :                     ;;;----------------------------------------------------------------------------
    1323/     5A7 :                     DIV2_REG16A:
    1324/     5A7 : 2E 38               	MVI H,REGPAGE
    1325/     5A9 : F0                  	MOV L,A
    1326/     5AA : 30                  	INR L
    1327/     5AB : C7                  	MOV A,M
    1328/     5AC : A0                  	ANA A			; clear Carry
    1329/     5AD :                     
    1330/     5AD : 1A                  	RAR			; {A[7:0],C}<={C,A[7:0]}
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 24 - 2024年08月18日 14時35分23秒


    1331/     5AE : F8                  	MOV M,A
    1332/     5AF : 31                  	DCR L
    1333/     5B0 : C7                  	MOV A,M
    1334/     5B1 : 1A                  	RAR			; {A[7:0],C}<={C,A[7:0]}
    1335/     5B2 : F8                  	MOV M,A
    1336/     5B3 : C6                  	MOV A,L			; restore A
    1337/     5B4 : 07                  	RET
    1338/     5B5 :                     	
    1339/     5B5 :                     ;;;----------------------------------------------------------------------------
    1340/     5B5 :                     ;;; MUL_REG16D_REG16E
    1341/     5B5 :                     ;;; REG16(D) =  REG16(D) * REG16(E)
    1342/     5B5 :                     ;;; destroy A,HL
    1343/     5B5 :                     ;;;----------------------------------------------------------------------------
    1344/     5B5 :                     MUL_REG16D_REG16E:
    1345/     5B5 : 46 CE 01            	CALL PUSH_BC
    1346/     5B8 : 46 DE 01            	CALL PUSH_DE
    1347/     5BB :                     
    1348/     5BB : 0E 56               	MVI B,lo(REG16_TMP_MUL)
    1349/     5BD : 46 72 02            	CALL MOV_REG16B_REG16D	; REG(TMP)= REG(D)
    1350/     5C0 :                     	
    1351/     5C0 : 0E 58               	MVI B,lo(REG16_TMP2_MUL)
    1352/     5C2 : 46 8C 02            	CALL MOV_REG16B_REG16E	; REG(TMP2)= REG(E)
    1353/     5C5 :                     	
    1354/     5C5 : 2E 38               	MVI H,REGPAGE
    1355/     5C7 : F3                  	MOV L,D
    1356/     5C8 : 3E 00               	MVI M,0
    1357/     5CA : 30                  	INR L			; clear resister for result
    1358/     5CB : 3E 00               	MVI M,0	                ; REG(D) = 0
    1359/     5CD :                     
    1360/     5CD : 26 56               	MVI E,lo(REG16_TMP_MUL)	 ; D (<<=1 for each loop)
    1361/     5CF : 0E 58               	MVI B,lo(REG16_TMP2_MUL) ; E (>>=1 for each loop)
    1362/     5D1 :                     
    1363/     5D1 : 16 10               	MVI C,16
    1364/     5D3 :                     .LOOP:
    1365/     5D3 : C1                  	MOV A,B			; B=TMP2 (=E>>x)
    1366/     5D4 : 46 A7 05            	CALL DIV2_REG16A	; E>>=1
    1367/     5D7 : 40 DD 05            	JNC .NEXT
    1368/     5DA : 46 6D 05            	CALL ADD_REG16D_REG16E	; ADD D to result if LSB(E) was 1
    1369/     5DD :                     .NEXT:	
    1370/     5DD : C4                  	MOV A,E			; E=TMP (=D<<x)
    1371/     5DE : 46 99 05            	CALL MUL2_REG16A	; D<<=1
    1372/     5E1 : 11                  	DCR C
    1373/     5E2 : 48 D3 05            	JNZ .LOOP
    1374/     5E5 : 46 1C 02            	CALL POP_DE
    1375/     5E8 : 44 0C 02            	JMP POP_BC
    1376/     5EB :                     	
    1377/     5EB :                     ;;;----------------------------------------------------------------------------
    1378/     5EB :                     ;;; DIV_UNSIGNED_REG16D_REG16E (for unsigned 16bit int REG(D) and REG(E))
    1379/     5EB :                     ;;; REG16(D) =  ((unsigned int)REG16(D)) / (unsigned int)REG16(E))
    1380/     5EB :                     ;;; REG(RMND) = remainder
    1381/     5EB :                     ;;; destroy: HL, A
    1382/     5EB :                     ;;;----------------------------------------------------------------------------
    1383/     5EB :                     DIV_UNSIGNED_REG16D_REG16E:
    1384/     5EB : 46 CE 01            	CALL PUSH_BC
    1385/     5EE : 46 DE 01            	CALL PUSH_DE
    1386/     5F1 :                     
    1387/     5F1 : 0E 66               	MVI B,lo(REG16_DIVIDEND)
    1388/     5F3 : 46 72 02            	CALL MOV_REG16B_REG16D		; copy REG(D) to DIVIDEND
    1389/     5F6 : D9                  	MOV D,B
    1390/     5F7 : 0E 68               	MVI B,lo(REG16_DIVISOR)		; copy REG(E) to DIVISOR
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 25 - 2024年08月18日 14時35分23秒


    1391/     5F9 : 46 8C 02            	CALL MOV_REG16B_REG16E
    1392/     5FC : E1                  	MOV E,B
    1393/     5FD :                     	
    1394/     5FD : (MACRO)              	LXI_BC 0001H		;BC=0001H
    1394/     5FD : 0E 00                       MVI B,up(0001H)
    1394/     5FF : 16 01                       MVI C,lo(0001H)
    1395/     601 : 0E 00               	MVI B,00
    1396/     603 : 16 01               	MVI C,01H
    1397/     605 :                     DIV_NORMALIZE_LOOP:
    1398/     605 : 2E 38               	MVI H,REGPAGE
    1399/     607 : 36 69               	MVI L,lo(REG16_DIVISOR)+1 ; upper byte of DIVISOR
    1400/     609 : C7                  	MOV A,M
    1401/     60A : 24 80               	ANI 80H
    1402/     60C : 48 21 06            	JNZ DIV_START           ; if MSB(bit15)==1 then start division
    1403/     60F : 06 68               	MVI A,lo(REG16_DIVISOR)
    1404/     611 : 46 99 05            	CALL MUL2_REG16A	; DIVISOR=DIVISOR<<1
    1405/     614 : A8                  	XRA A			; clear carry
    1406/     615 : C2                  	MOV A,C
    1407/     616 : 12                  	RAL
    1408/     617 : D0                  	MOV C,A
    1409/     618 : C1                  	MOV A,B
    1410/     619 : 12                  	RAL
    1411/     61A : C8                  	MOV B,A			; BC=BC<<1
    1412/     61B : 40 05 06            	JNC DIV_NORMALIZE_LOOP	; loop while BC not overflow
    1413/     61E : 44 5F 06            	JMP DIV_DIV0		; BC overflow
    1414/     621 :                     DIV_START:
    1415/     621 : 36 64               	MVI  L,lo(REG16_DIVRESULT)
    1416/     623 : 46 1B 05            	CALL CLEAR_REG16L
    1417/     626 :                     	
    1418/     626 :                     DIV_LOOP:
    1419/     626 : 1E 66               	MVI  D,lo(REG16_DIVIDEND)
    1420/     628 : 26 68               	MVI  E,lo(REG16_DIVISOR)
    1421/     62A : 46 FC 06            	CALL CMP_UNSIGNED_REG16D_REG16E
    1422/     62D : 60 3E 06            	JC   DIV_NEXT
    1423/     630 : 46 81 05            	CALL SUB_REG16D_REG16E
    1424/     633 :                     
    1425/     633 : 2E 38               	MVI H,REGPAGE
    1426/     635 : 36 64               	MVI L,lo(REG16_DIVRESULT)
    1427/     637 : C2                  	MOV A,C
    1428/     638 : 87                  	ADD M
    1429/     639 : F8                  	MOV M,A
    1430/     63A : 30                  	INR L
    1431/     63B : C1                  	MOV A,B
    1432/     63C : 8F                  	ADC M
    1433/     63D : F8                  	MOV M,A			; RESULT=RESULT+BC
    1434/     63E :                     	
    1435/     63E :                     DIV_NEXT:
    1436/     63E : 06 68               	MVI  A,lo(REG16_DIVISOR)
    1437/     640 : 46 A7 05            	CALL DIV2_REG16A
    1438/     643 : A8                  	XRA A			; clear carry
    1439/     644 : C1                  	MOV A,B
    1440/     645 : 1A                  	RAR
    1441/     646 : C8                  	MOV B,A
    1442/     647 : C2                  	MOV A,C
    1443/     648 : 1A                  	RAR
    1444/     649 : D0                  	MOV C,A			; BC=BC>>1
    1445/     64A : 40 26 06            	JNC DIV_LOOP		; loop until Carry=(01H>>1)
    1446/     64D :                     
    1447/     64D : 1E 46               	MVI D,lo(REG16_RMND)	; copy the last DIVIDENT to RMND
    1448/     64F : 26 66               	MVI E,lo(REG16_DIVIDEND)
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 26 - 2024年08月18日 14時35分23秒


    1449/     651 : 46 58 02            	CALL MOV_REG16D_REG16E
    1450/     654 :                     
    1451/     654 :                     DIV_EXIT:
    1452/     654 : 46 1C 02            	CALL POP_DE
    1453/     657 : 0E 64               	MVI  B,lo(REG16_DIVRESULT)
    1454/     659 : 46 7F 02            	CALL MOV_REG16D_REG16B
    1455/     65C : 44 0C 02            	JMP  POP_BC
    1456/     65F :                     
    1457/     65F :                     ;;; 	 Error: divide by zero 
    1458/     65F :                     DIV_DIV0:
    1459/     65F : 2E 38               	MVI H,REGPAGE
    1460/     661 : 36 46               	MVI L,lo(REG16_RMND)	; RMND = 0
    1461/     663 : 3E 00               	MVI M,0
    1462/     665 : 30                  	INR L
    1463/     666 : 3E 00               	MVI M,0
    1464/     668 :                     
    1465/     668 : 36 64               	MVI L,lo(REG16_DIVRESULT) ;DIVRESULT=MAXINT
    1466/     66A : 3E FF               	MVI M,lo(MAXINT)
    1467/     66C : 30                  	INR L
    1468/     66D : 3E 7F               	MVI M,up(MAXINT)
    1469/     66F : 44 54 06            	JMP DIV_EXIT
    1470/     672 :                     	
    1471/     672 :                     ;;;----------------------------------------------------------------------------
    1472/     672 :                     ;;; DIV_REG16D_REG16E
    1473/     672 :                     ;;; REG16(D) =  REG16(D) / REG16(E)
    1474/     672 :                     ;;; REG16(D) : dividend
    1475/     672 :                     ;;; REG16(E) : divisor
    1476/     672 :                     ;;; REG(RMND) = remainder
    1477/     672 :                     ;;; destroy: HL,A
    1478/     672 :                     ;;;----------------------------------------------------------------------------
    1479/     672 :                     DIV_REG16D_REG16E:
    1480/     672 : C4                  	MOV A,E
    1481/     673 : 46 2C 02            	CALL PUSH_REG16A		; push REG(E)
    1482/     676 : 46 CE 01            	CALL PUSH_BC
    1483/     679 : D3                  	MOV C,D			        ; save D to C
    1484/     67A :                     
    1485/     67A : (MACRO)              	LXI_HL REG8_SIGNDIVIDEND	; clear sign of the dividend
    1485/     67A : 2E 38                       MVI H,up(REG8_SIGNDIVIDEND)
    1485/     67C : 36 71                       MVI L,lo(REG8_SIGNDIVIDEND)
    1486/     67E : 3E 00               	MVI M,0
    1487/     680 : (MACRO)              	LXI_HL REG8_SIGNDIVISOR		; clear sign of the divisor
    1487/     680 : 2E 38                       MVI H,up(REG8_SIGNDIVISOR)
    1487/     682 : 36 72                       MVI L,lo(REG8_SIGNDIVISOR)
    1488/     684 : 3E 00               	MVI M,0
    1489/     686 :                     	
    1490/     686 : 46 41 05            	CALL GETSIGN_REG16D
    1491/     689 : 40 95 06            	JNC  .L1
    1492/     68C :                     	;;; for NEGATIVE_DIVIDEND
    1493/     68C : 46 48 05            	CALL COMPLEMENT2_REG16D		; REG(D)=abs(REG(D))
    1494/     68F : (MACRO)              	LXI_HL REG8_SIGNDIVIDEND	; set sign of the result
    1494/     68F : 2E 38                       MVI H,up(REG8_SIGNDIVIDEND)
    1494/     691 : 36 71                       MVI L,lo(REG8_SIGNDIVIDEND)
    1495/     693 : 3E 01               	MVI M,01H
    1496/     695 :                     .L1:
    1497/     695 : DC                  	MOV  D,E
    1498/     696 : 46 41 05            	CALL GETSIGN_REG16D
    1499/     699 : 40 A5 06            	JNC  .L2
    1500/     69C :                     	;;; for NEGATIVE_DIVISOR
    1501/     69C : 46 48 05            	CALL COMPLEMENT2_REG16D		; REG(E)=abs(REG(E))
    1502/     69F : (MACRO)              	LXI_HL REG8_SIGNDIVISOR		; toggle sign of the divisor
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 27 - 2024年08月18日 14時35分23秒


    1502/     69F : 2E 38                       MVI H,up(REG8_SIGNDIVISOR)
    1502/     6A1 : 36 72                       MVI L,lo(REG8_SIGNDIVISOR)
    1503/     6A3 : 3E 01               	MVI M,01H
    1504/     6A5 :                     .L2:
    1505/     6A5 :                     	;; exec DIV_UNSIGNED
    1506/     6A5 : DA                  	MOV  D,C		        ; restore D from C
    1507/     6A6 : 46 EB 05            	CALL DIV_UNSIGNED_REG16D_REG16E
    1508/     6A9 :                     
    1509/     6A9 : (MACRO)              	LXI_HL REG8_SIGNDIVIDEND        ; DIVIDEND<0 then RMND=-RMND
    1509/     6A9 : 2E 38                       MVI H,up(REG8_SIGNDIVIDEND)
    1509/     6AB : 36 71                       MVI L,lo(REG8_SIGNDIVIDEND)
    1510/     6AD : C7                  	MOV  A,M
    1511/     6AE : A0                  	ANA  A
    1512/     6AF : 68 B7 06            	JZ  .L3
    1513/     6B2 : 1E 46               	MVI D,lo(REG16_RMND)
    1514/     6B4 : 46 48 05            	CALL COMPLEMENT2_REG16D
    1515/     6B7 :                     .L3:
    1516/     6B7 : (MACRO)              	LXI_HL REG8_SIGNDIVIDEND	; sign(DIVIDEND) != sign(DIVISOR)
    1516/     6B7 : 2E 38                       MVI H,up(REG8_SIGNDIVIDEND)
    1516/     6B9 : 36 71                       MVI L,lo(REG8_SIGNDIVIDEND)
    1517/     6BB : C7                  	MOV  A,M			; then REG(D)=-REG(D)
    1518/     6BC : (MACRO)              	LXI_HL REG8_SIGNDIVISOR
    1518/     6BC : 2E 38                       MVI H,up(REG8_SIGNDIVISOR)
    1518/     6BE : 36 72                       MVI L,lo(REG8_SIGNDIVISOR)
    1519/     6C0 : BF                  	CMP M
    1520/     6C1 : 68 C8 06            	JZ .L4
    1521/     6C4 : DA                  	MOV D,C
    1522/     6C5 : 46 48 05            	CALL COMPLEMENT2_REG16D		; REG(D)=-REG(D)
    1523/     6C8 :                     .L4:
    1524/     6C8 : 46 0C 02            	CALL POP_BC
    1525/     6CB : C4                  	MOV A,E
    1526/     6CC : 44 42 02            	JMP POP_REG16A		        ; POP REG(E) and return
    1527/     6CF :                     
    1528/     6CF :                     	
    1529/     6CF :                     ;;;----------------------------------------------------------------------------
    1530/     6CF :                     ;;; XOR_REG16D_REG16E
    1531/     6CF :                     ;;; REG16(D) = REG16(D) ^ REG16(E)
    1532/     6CF :                     ;;; destroy: A,HL
    1533/     6CF :                     ;;;----------------------------------------------------------------------------
    1534/     6CF :                     XOR_REG16D_REG16E:
    1535/     6CF : 2E 38               	MVI H,REGPAGE
    1536/     6D1 : F4                  	MOV L,E
    1537/     6D2 : C7                  	MOV A,M
    1538/     6D3 : F3                  	MOV L,D
    1539/     6D4 : AF                  	XRA M
    1540/     6D5 : F8                  	MOV M,A
    1541/     6D6 : F4                  	MOV L,E
    1542/     6D7 : 30                  	INR L
    1543/     6D8 : C7                  	MOV A,M
    1544/     6D9 : F3                  	MOV L,D
    1545/     6DA : 30                  	INR L
    1546/     6DB : AF                  	XRA M
    1547/     6DC : F8                  	MOV M,A
    1548/     6DD : 07                  	RET
    1549/     6DE :                     
    1550/     6DE :                     ;;;----------------------------------------------------------------------------
    1551/     6DE :                     ;;; AND_REG16D_REG16E
    1552/     6DE :                     ;;; REG16(D) = REG16(D) & REG16(E)
    1553/     6DE :                     ;;; destroy: A,HL
    1554/     6DE :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 28 - 2024年08月18日 14時35分23秒


    1555/     6DE :                     AND_REG16D_REG16E:
    1556/     6DE : 2E 38               	MVI H,REGPAGE
    1557/     6E0 : F4                  	MOV L,E
    1558/     6E1 : C7                  	MOV A,M
    1559/     6E2 : F3                  	MOV L,D
    1560/     6E3 : A7                  	ANA M
    1561/     6E4 : F8                  	MOV M,A
    1562/     6E5 : F4                  	MOV L,E
    1563/     6E6 : 30                  	INR L
    1564/     6E7 : C7                  	MOV A,M
    1565/     6E8 : F3                  	MOV L,D
    1566/     6E9 : 30                  	INR L
    1567/     6EA : A7                  	ANA M
    1568/     6EB : F8                  	MOV M,A
    1569/     6EC : 07                  	RET
    1570/     6ED :                     
    1571/     6ED :                     ;;;----------------------------------------------------------------------------
    1572/     6ED :                     ;;; OR_REG16D_REG16E
    1573/     6ED :                     ;;; REG16(D) = REG16(D) | REG16(E)
    1574/     6ED :                     ;;; destroy: A,HL
    1575/     6ED :                     ;;;----------------------------------------------------------------------------
    1576/     6ED :                     OR_REG16D_REG16E:
    1577/     6ED : 2E 38               	MVI H,REGPAGE
    1578/     6EF : F4                  	MOV L,E
    1579/     6F0 : C7                  	MOV A,M
    1580/     6F1 : F3                  	MOV L,D
    1581/     6F2 : B7                  	ORA M
    1582/     6F3 : F8                  	MOV M,A
    1583/     6F4 : F4                  	MOV L,E
    1584/     6F5 : 30                  	INR L
    1585/     6F6 : C7                  	MOV A,M
    1586/     6F7 : F3                  	MOV L,D
    1587/     6F8 : 30                  	INR L
    1588/     6F9 : B7                  	ORA M
    1589/     6FA : F8                  	MOV M,A
    1590/     6FB : 07                  	RET
    1591/     6FC :                     
    1592/     6FC :                     ;;;----------------------------------------------------------------------------
    1593/     6FC :                     ;;; CMP_UNSIGNED_REG16D_REG16E
    1594/     6FC :                     ;;; Compare by REG16(D) - REG16(E)
    1595/     6FC :                     ;;; Z=1, C=0: REG16(D) == REG16(E)
    1596/     6FC :                     ;;; Z=0, C=1: REG16(D) <  REG16(E)
    1597/     6FC :                     ;;; Z=0, C=0: REG16(D) >= REG16(E)
    1598/     6FC :                     ;;; destroy: A,HL
    1599/     6FC :                     ;;;----------------------------------------------------------------------------
    1600/     6FC :                     CMP_UNSIGNED_REG16D_REG16E:
    1601/     6FC : 2E 38               	MVI H,REGPAGE
    1602/     6FE : F3                  	MOV L,D
    1603/     6FF : 30                  	INR L
    1604/     700 : C7                  	MOV A,M			; A = upper byte of REG(D)
    1605/     701 : F4                  	MOV L,E
    1606/     702 : 30                  	INR L
    1607/     703 : BF                  	CMP M			;upper byte REG(D)-REG(E)
    1608/     704 : 0B                  	RNZ			; return if upper byte REG(D)!=REG(E)
    1609/     705 : F3                  	MOV L,D
    1610/     706 : C7                  	MOV A,M			; A = lower byte of REG(D)
    1611/     707 : F4                  	MOV L,E
    1612/     708 : BF                  	CMP M			;lower byte REG(D)-REG(E)
    1613/     709 : 07                  	RET
    1614/     70A :                     	
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 29 - 2024年08月18日 14時35分23秒


    1615/     70A :                     ;;;----------------------------------------------------------------------------
    1616/     70A :                     ;;; CMP_REG16D_REG16E (compare signed 16 bit integer)
    1617/     70A :                     ;;; -32767=8001H<=X<=7FFFH=32767
    1618/     70A :                     ;;; zero is 0000H
    1619/     70A :                     ;;; positive number is  0001H to  7FFFH (1 to 32767)
    1620/     70A :                     ;;; negative number is  8001H to 0FFFFH (-32767 to -1)
    1621/     70A :                     ;;; 8000H is undefined number
    1622/     70A :                     ;;; Z=1, C=0: REG16(D) == REG16(E)
    1623/     70A :                     ;;; Z=0, C=1: REG16(D) <  REG16(E)
    1624/     70A :                     ;;; Z=0, C=0: REG16(D) >= REG16(E)
    1625/     70A :                     ;;; destroy: A,HL
    1626/     70A :                     ;;;----------------------------------------------------------------------------
    1627/     70A :                     CMP_REG16D_REG16E:
    1628/     70A : 2E 38               	MVI H,REGPAGE
    1629/     70C : F3                  	MOV L,D
    1630/     70D : 30                  	INR L
    1631/     70E : C7                  	MOV A,M
    1632/     70F : 12                  	RAL
    1633/     710 : 60 1D 07            	JC .NEGD
    1634/     713 : F4                  	MOV L,E
    1635/     714 : 30                  	INR L
    1636/     715 : C7                  	MOV A,M
    1637/     716 : 12                  	RAL
    1638/     717 : 60 2F 07            	JC .POSD_NEGE
    1639/     71A : 44 FC 06            	JMP CMP_UNSIGNED_REG16D_REG16E	;; POSD_POSE
    1640/     71D :                     .NEGD:
    1641/     71D : F4                  	MOV L,E
    1642/     71E : 30                  	INR L
    1643/     71F : C7                  	MOV A,M
    1644/     720 : 12                  	RAL
    1645/     721 : 40 33 07            	JNC .NEGD_POSE
    1646/     724 : 46 FC 06            	CALL CMP_UNSIGNED_REG16D_REG16E	;; NEGD_NEGE
    1647/     727 : 2B                  	RZ				; return if equal
    1648/     728 :                     	;; make complement C
    1649/     728 : 06 01               	MVI A,01H			; to reset Z flag by RAL&XRI 01H
    1650/     72A : 12                  	RAL
    1651/     72B : 2C 01               	XRI 01H
    1652/     72D : 1A                  	RAR
    1653/     72E : 07                  	RET			; Z=0, C=(not C)
    1654/     72F :                     .POSD_NEGE:
    1655/     72F : A8                  	XRA A
    1656/     730 : 04 01               	ADI 01H			; Z=0, C=0
    1657/     732 : 07                  	RET
    1658/     733 :                     .NEGD_POSE:
    1659/     733 : A8                  	XRA A
    1660/     734 : 14 01               	SUI 01H			; Z=0, C=1
    1661/     736 : 07                  	RET
    1662/     737 :                     
    1663/     737 :                     ;;;----------------------------------------------------------------------------
    1664/     737 :                     ;;; MAKE_RANDOMNUMBER:
    1665/     737 :                     ;;; Pseudo random number generator
    1666/     737 :                     ;;; destroys REG16_TMP, REG16_TMP2, HL,A
    1667/     737 :                     ;;; 
    1668/     737 :                     ;;; REG16_RANDOM0: hidden state  (x)
    1669/     737 :                     ;;; REG16_RANDOM1: RANDOM NUMBER (y)
    1670/     737 :                     ;;; 
    1671/     737 :                     ;;; 16bit xorshift algorithm
    1672/     737 :                     ;;; https://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
    1673/     737 :                     ;;; unsigned REG16 x, y, t
    1674/     737 :                     ;;; initial state: x=y=RANDOM_SEED
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 30 - 2024年08月18日 14時35分23秒


    1675/     737 :                     ;;; t = x ^ (x<<5)
    1676/     737 :                     ;;; x = y
    1677/     737 :                     ;;; t = t ^ (t>>3)
    1678/     737 :                     ;;; y = y ^ (y>>1)
    1679/     737 :                     ;;; y = y ^ t
    1680/     737 :                     ;;;----------------------------------------------------------------------------
    1681/     737 :                     MAKE_RANDOMNUMBER:
    1682/     737 : 46 CE 01            	CALL PUSH_BC
    1683/     73A : 46 DE 01            	CALL PUSH_DE
    1684/     73D :                     
    1685/     73D : 1E 52               	MVI D,lo(REG16_TMP)		; t
    1686/     73F : 26 4A               	MVI E,lo(REG16_RANDOM0)		; x
    1687/     741 :                     
    1688/     741 : 46 58 02            	CALL MOV_REG16D_REG16E		; t=x
    1689/     744 : C3                  	MOV  A,D
    1690/     745 : 46 99 05            	CALL MUL2_REG16A		;
    1691/     748 : 46 99 05            	CALL MUL2_REG16A		;
    1692/     74B : 46 99 05            	CALL MUL2_REG16A		;
    1693/     74E : 46 99 05            	CALL MUL2_REG16A		;
    1694/     751 : 46 99 05            	CALL MUL2_REG16A		; t=x<<5
    1695/     754 : 46 CF 06             	CALL XOR_REG16D_REG16E  	; t= (x<<5) ^ x
    1696/     757 :                     
    1697/     757 : 1E 4C               	MVI  D,lo(REG16_RANDOM1)	; y
    1698/     759 : 46 65 02            	CALL MOV_REG16E_REG16D		; x = y
    1699/     75C :                     	
    1700/     75C : 1E 54               	MVI  D,lo(REG16_TMP2)
    1701/     75E : 26 52               	MVI  E,lo(REG16_TMP)		; t
    1702/     760 : 46 58 02            	CALL MOV_REG16D_REG16E		; tmp2=t
    1703/     763 : C3                  	MOV  A,D
    1704/     764 : 46 A7 05            	CALL DIV2_REG16A
    1705/     767 : 46 A7 05            	CALL DIV2_REG16A
    1706/     76A : 46 A7 05            	CALL DIV2_REG16A   		; tmp2 = t>>3
    1707/     76D : 46 CF 06            	CALL XOR_REG16D_REG16E		; tmp2 = (t>>3)^t
    1708/     770 :                     
    1709/     770 : 1E 4C               	MVI  D,lo(REG16_RANDOM1)	; y
    1710/     772 : 26 52               	MVI  E,lo(REG16_TMP)
    1711/     774 : 46 65 02            	CALL MOV_REG16E_REG16D    	; t = y
    1712/     777 : C4                  	MOV  A,E
    1713/     778 : 46 A7 05            	CALL DIV2_REG16A		; t = y>>1
    1714/     77B : 46 CF 06            	CALL XOR_REG16D_REG16E 		; y = y^(y>>1)
    1715/     77E :                     	
    1716/     77E : 26 54               	MVI  E,lo(REG16_TMP2)
    1717/     780 : 46 CF 06            	CALL XOR_REG16D_REG16E		; y = y^tmp2
    1718/     783 :                     
    1719/     783 : 46 1C 02            	CALL POP_DE
    1720/     786 : 44 0C 02            	JMP  POP_BC
    1721/     789 :                     	
    1722/     789 :                     ;;;---------------------------------------------------------------------------
    1723/     789 :                     ;;; Program for Very Tiny Language Interpreter
    1724/     789 :                     ;;;---------------------------------------------------------------------------
    1725/     789 :                     	
    1726/     789 :                     ;;;---------------------------------------------------------------------------
    1727/     789 :                     VTL_START:
    1728/     789 :                     ;;;---------------------------------------------------------------------------
    1729/     789 :                     ;;; some initialization
    1730/     789 :                     ;;;---------------------------------------------------------------------------
    1731/     789 :                     	; initialize stack pointers
    1732/     789 : (MACRO)              	LXI_HL STACK
    1732/     789 : 2E 3F                       MVI H,up(STACK)
    1732/     78B : 36 00                       MVI L,lo(STACK)
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 31 - 2024年08月18日 14時35分23秒


    1733/     78D : 3E 00               	MVI M,0
    1734/     78F : (MACRO)              	LXI_HL PCSTACK
    1734/     78F : 2E 3E                       MVI H,up(PCSTACK)
    1734/     791 : 36 00                       MVI L,lo(PCSTACK)
    1735/     793 : 3E 00               	MVI M,0
    1736/     795 :                     
    1737/     795 :                     	; initialize constants
    1738/     795 : (MACRO)              	LXI_HL REG16_CONST_10000
    1738/     795 : 2E 38                       MVI H,up(REG16_CONST_10000)
    1738/     797 : 36 74                       MVI L,lo(REG16_CONST_10000)
    1739/     799 : 3E 10               	MVI M,lo(10000)
    1740/     79B : 30                  	INR L
    1741/     79C : 3E 27               	MVI M,up(10000)
    1742/     79E : 30                  	INR L
    1743/     79F : 3E E8               	MVI M,lo(1000)
    1744/     7A1 : 30                  	INR L
    1745/     7A2 : 3E 03               	MVI M,up(1000)
    1746/     7A4 : 30                  	INR L
    1747/     7A5 : 3E 64               	MVI M,lo(100)
    1748/     7A7 : 30                  	INR L
    1749/     7A8 : 3E 00               	MVI M,up(100)
    1750/     7AA : 30                  	INR L
    1751/     7AB : 3E 0A               	MVI M,lo(10)
    1752/     7AD : 30                  	INR L
    1753/     7AE : 3E 00               	MVI M,up(10)
    1754/     7B0 :                     
    1755/     7B0 :                     .LOOP:
    1756/     7B0 : (MACRO)              	LXI_HL STR_VTL_MESSAGE
    1756/     7B0 : 2E 01                       MVI H,up(STR_VTL_MESSAGE)
    1756/     7B2 : 36 0F                       MVI L,lo(STR_VTL_MESSAGE)
    1757/     7B4 : 46 52 00            	CALL PUTS
    1758/     7B7 : (MACRO)              	MVI_REG16 REG16_PEND,PROGRAM_START	; REG(PEND) = PROGRAM_START
    1758/     7B7 :  (MACRO-2)                   LXI_HL REG16_PEND
    1758/     7B7 : 2E 38                       MVI H,up(REG16_PEND)
    1758/     7B9 : 36 3C                       MVI L,lo(REG16_PEND)
    1758/     7BB : 3E 00                       MVI M,lo(PROGRAM_START)
    1758/     7BD : 30                          INR L
    1758/     7BE : 3E 10                       MVI M,up(PROGRAM_START)
    1758/     7C0 : 31                          DCR L
    1759/     7C1 : (MACRO)              	MVI_REG16 REG16_RANDOM0, RANDOM_SEED 	; REG(RANDOM0) = RANDOM_SEED
    1759/     7C1 :  (MACRO-2)                   LXI_HL REG16_RANDOM0
    1759/     7C1 : 2E 38                       MVI H,up(REG16_RANDOM0)
    1759/     7C3 : 36 4A                       MVI L,lo(REG16_RANDOM0)
    1759/     7C5 : 3E D2                       MVI M,lo(RANDOM_SEED)
    1759/     7C7 : 30                          INR L
    1759/     7C8 : 3E 04                       MVI M,up(RANDOM_SEED)
    1759/     7CA : 31                          DCR L
    1760/     7CB : (MACRO)              	MVI_REG16 REG16_RANDOM1, RANDOM_SEED	; REG(RANDOM1) = RANDOM_SEED
    1760/     7CB :  (MACRO-2)                   LXI_HL REG16_RANDOM1
    1760/     7CB : 2E 38                       MVI H,up(REG16_RANDOM1)
    1760/     7CD : 36 4C                       MVI L,lo(REG16_RANDOM1)
    1760/     7CF : 3E D2                       MVI M,lo(RANDOM_SEED)
    1760/     7D1 : 30                          INR L
    1760/     7D2 : 3E 04                       MVI M,up(RANDOM_SEED)
    1760/     7D4 : 31                          DCR L
    1761/     7D5 :                     
    1762/     7D5 : 44 22 08            	JMP VTL_NOERROR
    1763/     7D8 :                     ;;;---------------------------------------------------------------------------
    1764/     7D8 :                     ;;; Main Loop
    1765/     7D8 :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 32 - 2024年08月18日 14時35分23秒


    1766/     7D8 :                     VTL_MAIN:
    1767/     7D8 :                     ;;;---------------------------------------------------------------------------
    1768/     7D8 :                     ;;; Error check
    1769/     7D8 :                     ;;;---------------------------------------------------------------------------
    1770/     7D8 :                     	;; print REG(ERROR) if not zero
    1771/     7D8 : (MACRO)              	LXI_HL REG16_ERROR
    1771/     7D8 : 2E 38                       MVI H,up(REG16_ERROR)
    1771/     7DA : 36 6E                       MVI L,lo(REG16_ERROR)
    1772/     7DC : 46 58 05            	CALL ISZERO_REG16L
    1773/     7DF : 68 22 08            	JZ  VTL_NOERROR
    1774/     7E2 :                     	;; print error message
    1775/     7E2 : 1E 6E               	MVI D,lo(REG16_ERROR)
    1776/     7E4 : 46 94 0E            	CALL PRINTSTR_MEMREG16D
    1777/     7E7 : (MACRO)              	PUTCHAR ' '
    1777/     7E7 : 06 20                       MVI  A,' '
    1777/     7E9 : 46 40 00                    CALL PUTCH
    1778/     7EC : (MACRO)              	LXI_HL REG8_ERROR2
    1778/     7EC : 2E 38                       MVI H,up(REG8_ERROR2)
    1778/     7EE : 36 70                       MVI L,lo(REG8_ERROR2)
    1779/     7F0 : C7                  	MOV A,M
    1780/     7F1 : 46 B8 02            	CALL PRINTHEX_A		; print error code
    1781/     7F4 : (MACRO)              	PUTCHAR ' '
    1781/     7F4 : 06 20                       MVI  A,' '
    1781/     7F6 : 46 40 00                    CALL PUTCH
    1782/     7F9 :                     	
    1783/     7F9 :                     	;; print remainig buffer 
    1784/     7F9 : (MACRO)              	LXI_HL STR_VTL_BUF
    1784/     7F9 : 2E 01                       MVI H,up(STR_VTL_BUF)
    1784/     7FB : 36 6A                       MVI L,lo(STR_VTL_BUF)
    1785/     7FD : 46 52 00            	CALL PUTS
    1786/     800 :                     
    1787/     800 : 1E 00               	MVI D,lo(REG16_INDEX)
    1788/     802 : 46 A5 02            	CALL DEC_REG16D
    1789/     805 : 46 94 0E            	CALL PRINTSTR_MEMREG16D ; print (REG(INDEX)-1) (for debug)
    1790/     808 : 46 60 00            	CALL PRINT_CRLF
    1791/     80B :                     
    1792/     80B :                     	;; print error line number
    1793/     80B : 1E 36               	MVI D,lo(REG16_LINENUM)
    1794/     80D : 46 57 05            	CALL ISZERO_REG16D
    1795/     810 : 68 22 08            	JZ  VTL_ERROR_NOLINENUM
    1796/     813 : (MACRO)              	LXI_HL STR_VTL_ERRORLINENUM
    1796/     813 : 2E 01                       MVI H,up(STR_VTL_ERRORLINENUM)
    1796/     815 : 36 79                       MVI L,lo(STR_VTL_ERRORLINENUM)
    1797/     817 : 46 52 00            	CALL PUTS
    1798/     81A : 1E 36               	MVI D,lo(REG16_LINENUM)
    1799/     81C : 46 66 0D            	CALL PRINT_REG16D
    1800/     81F : 46 60 00            	CALL PRINT_CRLF
    1801/     822 :                     	
    1802/     822 :                     VTL_ERROR_NOLINENUM:
    1803/     822 :                     VTL_NOERROR:
    1804/     822 :                     	;; Check stack pointer
    1805/     822 :                     	;; 
    1806/     822 :                     	;; if SP !=0 print it and reset (for debug)
    1807/     822 : (MACRO)              	LXI_HL STACK
    1807/     822 : 2E 3F                       MVI H,up(STACK)
    1807/     824 : 36 00                       MVI L,lo(STACK)
    1808/     826 : C7                  	MOV A,M
    1809/     827 : D0                  	MOV C,A
    1810/     828 : A0                  	ANA A
    1811/     829 : 68 3A 08            	JZ  VTL_SPOK
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 33 - 2024年08月18日 14時35分23秒


    1812/     82C : (MACRO)              	LXI_HL STR_VTL_SP
    1812/     82C : 2E 01                       MVI H,up(STR_VTL_SP)
    1812/     82E : 36 6F                       MVI L,lo(STR_VTL_SP)
    1813/     830 : 46 52 00            	CALL PUTS
    1814/     833 : C2                  	MOV  A,C
    1815/     834 : 46 B8 02            	CALL PRINTHEX_A
    1816/     837 : 46 60 00            	CALL PRINT_CRLF
    1817/     83A :                     VTL_SPOK:
    1818/     83A : (MACRO)              	LXI_HL PCSTACK
    1818/     83A : 2E 3E                       MVI H,up(PCSTACK)
    1818/     83C : 36 00                       MVI L,lo(PCSTACK)
    1819/     83E : C7                  	MOV A,M
    1820/     83F : D0                  	MOV C,A
    1821/     840 : A0                  	ANA A
    1822/     841 : 68 52 08            	JZ  VTL_OK
    1823/     844 : (MACRO)              	LXI_HL STR_VTL_PCSP
    1823/     844 : 2E 01                       MVI H,up(STR_VTL_PCSP)
    1823/     846 : 36 73                       MVI L,lo(STR_VTL_PCSP)
    1824/     848 : 46 52 00            	CALL PUTS
    1825/     84B : C2                  	MOV  A,C
    1826/     84C : 46 B8 02            	CALL PRINTHEX_A
    1827/     84F : 46 60 00            	CALL PRINT_CRLF
    1828/     852 :                     
    1829/     852 :                     VTL_OK:	
    1830/     852 :                     	;; Reset stack pointers and error registers
    1831/     852 :                     	;; and print a prompt 'OK'
    1832/     852 :                     
    1833/     852 :                     	;; RESET SP
    1834/     852 : A8                  	XRA A
    1835/     853 : (MACRO)              	LXI_HL STACK
    1835/     853 : 2E 3F                       MVI H,up(STACK)
    1835/     855 : 36 00                       MVI L,lo(STACK)
    1836/     857 : F8                  	MOV M,A
    1837/     858 : (MACRO)              	LXI_HL PCSTACK
    1837/     858 : 2E 3E                       MVI H,up(PCSTACK)
    1837/     85A : 36 00                       MVI L,lo(PCSTACK)
    1838/     85C : F8                  	MOV M,A
    1839/     85D :                     
    1840/     85D :                     	;; RESET RETURN STACK
    1841/     85D : (MACRO)              	MVI_REG16 REG16_RETURNSTACK,RETURNSTACK
    1841/     85D :  (MACRO-2)                   LXI_HL REG16_RETURNSTACK
    1841/     85D : 2E 38                       MVI H,up(REG16_RETURNSTACK)
    1841/     85F : 36 48                       MVI L,lo(REG16_RETURNSTACK)
    1841/     861 : 3E 00                       MVI M,lo(RETURNSTACK)
    1841/     863 : 30                          INR L
    1841/     864 : 3E 3D                       MVI M,up(RETURNSTACK)
    1841/     866 : 31                          DCR L
    1842/     867 :                     	
    1843/     867 :                     	;; clear error registers
    1844/     867 : A8                  	XRA A
    1845/     868 : 2E 38               	MVI H,REGPAGE
    1846/     86A : 36 6E               	MVI L,lo(REG16_ERROR)
    1847/     86C : F8                  	MOV M,A
    1848/     86D : 30                  	INR L
    1849/     86E : F8                  	MOV M,A
    1850/     86F : 36 70               	MVI L,lo(REG8_ERROR2)
    1851/     871 : F8                  	MOV M,A
    1852/     872 :                     	
    1853/     872 : (MACRO)              	LXI_HL STR_VTL_OK
    1853/     872 : 2E 01                       MVI H,up(STR_VTL_OK)
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 34 - 2024年08月18日 14時35分23秒


    1853/     874 : 36 44                       MVI L,lo(STR_VTL_OK)
    1854/     876 : 46 52 00            	CALL PUTS
    1855/     879 :                     
    1856/     879 :                     ;;; LOOP entry for program input
    1857/     879 :                     VTL_LOOP:
    1858/     879 :                     	;; 	PUTCHAR '%'	; put a prompt (for debug)
    1859/     879 :                     
    1860/     879 : 36 36               	MVI L,lo(REG16_LINENUM)	; clear linenumber counter
    1861/     87B : 46 1B 05            	CALL CLEAR_REG16L
    1862/     87E :                     	
    1863/     87E : (MACRO)              	MVI_REG16 REG16_INDEX,LINEBUF 	; REG(INDEX) = LINEBUF
    1863/     87E :  (MACRO-2)                   LXI_HL REG16_INDEX
    1863/     87E : 2E 38                       MVI H,up(REG16_INDEX)
    1863/     880 : 36 00                       MVI L,lo(REG16_INDEX)
    1863/     882 : 3E 00                       MVI M,lo(LINEBUF)
    1863/     884 : 30                          INR L
    1863/     885 : 3E 3D                       MVI M,up(LINEBUF)
    1863/     887 : 31                          DCR L
    1864/     888 :                     
    1865/     888 :                     ;;; function test (for debug)
    1866/     888 :                     ;;;   	include "test.asm"
    1867/     888 :                     ;;; TEST_EXIT:
    1868/     888 :                     	
    1869/     888 : 1E 00               	MVI  D,lo(REG16_INDEX)
    1870/     88A : 46 A8 03            	CALL GETLINE_MEMREG16D
    1871/     88D : 46 20 03            	CALL MOV_A_MEMREG16D	; ACC=(REG(INDEX))
    1872/     890 :                     	
    1873/     890 : 3C 2E               	CPI '.'			; monitor command
    1874/     892 : 68 7A 04            	JZ  VTL_MONITORCMD
    1875/     895 :                     
    1876/     895 : 46 E0 02            	CALL ISNUM_A
    1877/     898 : 60 D0 0C            	JC  VTL_INSERT_PROGRAMLINE ; Top character is a number
    1878/     89B :                     
    1879/     89B : (MACRO)              	MVI_REG16 REG16_LINENUM,0 ; REG(LINENUM)=0
    1879/     89B :  (MACRO-2)                   LXI_HL REG16_LINENUM
    1879/     89B : 2E 38                       MVI H,up(REG16_LINENUM)
    1879/     89D : 36 36                       MVI L,lo(REG16_LINENUM)
    1879/     89F : 3E 00                       MVI M,lo(0)
    1879/     8A1 : 30                          INR L
    1879/     8A2 : 3E 00                       MVI M,up(0)
    1879/     8A4 : 31                          DCR L
    1880/     8A5 : (MACRO)              	MVI_REG16 REG16_NEXTLINE_PTR, PROGRAM_END
    1880/     8A5 :  (MACRO-2)                   LXI_HL REG16_NEXTLINE_PTR
    1880/     8A5 : 2E 38                       MVI H,up(REG16_NEXTLINE_PTR)
    1880/     8A7 : 36 3A                       MVI L,lo(REG16_NEXTLINE_PTR)
    1880/     8A9 : 3E FF                       MVI M,lo(PROGRAM_END)
    1880/     8AB : 30                          INR L
    1880/     8AC : 3E 37                       MVI M,up(PROGRAM_END)
    1880/     8AE : 31                          DCR L
    1881/     8AF :                     				; REG(NEXTLINE_PTR)=MEMEND to exit after exec
    1882/     8AF :                     
    1883/     8AF : 1E 00               	MVI D,lo(REG16_INDEX)
    1884/     8B1 : 44 4A 09            	JMP VTL_RUN_SINGLE_LINE
    1885/     8B4 :                     
    1886/     8B4 :                     ;;;----------------------------------------------------------------------------
    1887/     8B4 :                     ;;; FIND_LINE_AND_EXEC
    1888/     8B4 :                     ;;; Search for the linenumber REG(LINENUM) and find the pointer of the line
    1889/     8B4 :                     ;;; to be executed (minimum linenumber >= REG(LINENUM))
    1890/     8B4 :                     ;;; in the PM(PROGRAM) and set REG(LINENUM) to the found linenumber
    1891/     8B4 :                     ;;; and execute it
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 35 - 2024年08月18日 14時35分23秒


    1892/     8B4 :                     ;;;----------------------------------------------------------------------------
    1893/     8B4 :                     FIND_LINE_AND_EXEC:
    1894/     8B4 : (MACRO)              	MVI_REG16 REG16_INDEX,PROGRAM_START ; REG(INDEX) = PROGRAM_START
    1894/     8B4 :  (MACRO-2)                   LXI_HL REG16_INDEX
    1894/     8B4 : 2E 38                       MVI H,up(REG16_INDEX)
    1894/     8B6 : 36 00                       MVI L,lo(REG16_INDEX)
    1894/     8B8 : 3E 00                       MVI M,lo(PROGRAM_START)
    1894/     8BA : 30                          INR L
    1894/     8BB : 3E 10                       MVI M,up(PROGRAM_START)
    1894/     8BD : 31                          DCR L
    1895/     8BE : DE                  	MOV D,L				    ; D=INDEX
    1896/     8BF :                     
    1897/     8BF :                     .LOOP:
    1898/     8BF : 26 38               	MVI  E,lo(REG16_THISLINE_PTR)
    1899/     8C1 : 46 65 02            	CALL MOV_REG16E_REG16D			; REG(THISLINE_PTR)=REG(INDEX)
    1900/     8C4 :                     
    1901/     8C4 : 26 52               	MVI  E,lo(REG16_TMP)
    1902/     8C6 : 46 68 03            	CALL MOV_REG16E_MEMREG16D		; REG(TMP) =current line numbe
    1903/     8C9 : 46 99 02            	CALL INC_REG16D
    1904/     8CC : 46 99 02            	CALL INC_REG16D				; REG(D)++ (+2byte)
    1905/     8CF :                     
    1906/     8CF :                     	
    1907/     8CF : 1E 52               	MVI  D,lo(REG16_TMP)
    1908/     8D1 : 26 36               	MVI  E,lo(REG16_LINENUM)
    1909/     8D3 : 46 FC 06            	CALL CMP_UNSIGNED_REG16D_REG16E
    1910/     8D6 : 40 EB 08             	JNC   .GO		; REG(TMP) >= REG(LINENUM) then GO (exec)
    1911/     8D9 :                     	
    1912/     8D9 : 1E 00               	MVI  D,lo(REG16_INDEX)
    1913/     8DB : 26 00               	MVI  E,lo(REG16_INDEX)
    1914/     8DD : 46 68 03            	CALL MOV_REG16E_MEMREG16D		; REG(INDEX)= next line pointer
    1915/     8E0 :                     
    1916/     8E0 : 26 3C               	MVI  E,lo(REG16_PEND)
    1917/     8E2 : 46 FC 06            	CALL CMP_UNSIGNED_REG16D_REG16E
    1918/     8E5 : 60 BF 08            	JC  .LOOP			; loop while REG(INDEX)<REG(PEND)
    1919/     8E8 : 44 D8 07            	JMP VTL_MAIN				; reach the end of the program
    1920/     8EB :                     
    1921/     8EB :                     .GO:
    1922/     8EB : 46 65 02            	CALL MOV_REG16E_REG16D	; REG(LINENUM) = real linenum
    1923/     8EE : 44 03 09            	JMP  VTL_RUN_PROGRAM_MINDEX_FROM_GOTO ; 
    1924/     8F1 :                     	
    1925/     8F1 :                     ;;;----------------------------------------------------------------------------
    1926/     8F1 :                     ;;; VTL_RUN_PROGRAM_MINDEX:
    1927/     8F1 :                     ;;; Run the program buffer "MINDEX" (= MEM(REG(INDEX)) = *REG(INDEX))
    1928/     8F1 :                     ;;; one line is:
    1929/     8F1 :                     ;;; 	2 byte: linenumber
    1930/     8F1 :                     ;;; 	2 byte: PTR to next line
    1931/     8F1 :                     ;;; 	   x  : program code
    1932/     8F1 :                     ;;; 	1 byte: 00H (EOL)
    1933/     8F1 :                     ;;; if REG(NEXTLINE_PTR)==0 or REG(NEXTLINE_PTR)>=REG(PEND) then back to prompt
    1934/     8F1 :                     ;;;----------------------------------------------------------------------------
    1935/     8F1 :                     VTL_RUN_PROGRAM_MINDEX:
    1936/     8F1 : 1E 00               	MVI D,lo(REG16_INDEX)
    1937/     8F3 : 26 38               	MVI E,lo(REG16_THISLINE_PTR)
    1938/     8F5 : 46 65 02            	CALL MOV_REG16E_REG16D    ; REG(THIS_LINE_PTR)=REG(INDEX)
    1939/     8F8 :                     
    1940/     8F8 : 26 36               	MVI  E,lo(REG16_LINENUM)        ; REG(LINENUM)=current line number
    1941/     8FA : 46 68 03            	CALL MOV_REG16E_MEMREG16D	;             (=*REG(INDEX))
    1942/     8FD : 46 99 02            	CALL INC_REG16D			; REG(INDEX)++ (+=2)
    1943/     900 : 46 99 02            	CALL INC_REG16D
    1944/     903 :                     
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 36 - 2024年08月18日 14時35分23秒


    1945/     903 :                     VTL_RUN_PROGRAM_MINDEX_FROM_GOTO:
    1946/     903 : 1E 00               	MVI D,lo(REG16_INDEX)
    1947/     905 : 26 3A               	MVI E,lo(REG16_NEXTLINE_PTR)
    1948/     907 : 46 68 03            	CALL MOV_REG16E_MEMREG16D	; REG(NEXT_LINE_PTR)=*REG(INDEX)
    1949/     90A : 46 99 02            	CALL INC_REG16D                 ; REG(INDEX)++ (+=2)
    1950/     90D : 46 99 02            	CALL INC_REG16D
    1951/     910 :                     
    1952/     910 : 44 4A 09            	JMP VTL_RUN_SINGLE_LINE
    1953/     913 :                     
    1954/     913 :                     VTL_RUN_PROGRAM_MINDEX_FROM_RETURN:
    1955/     913 :                     	;; recover context (INDEX, THISLINE_PTR, NEXTLINE_PTR)
    1956/     913 : 1E 48               	MVI D,lo(REG16_RETURNSTACK)
    1957/     915 :                     
    1958/     915 : 26 3A               	MVI  E,lo(REG16_NEXTLINE_PTR)
    1959/     917 : 46 68 03            	CALL MOV_REG16E_MEMREG16D
    1960/     91A : 46 99 02            	CALL INC_REG16D
    1961/     91D : 46 99 02            	CALL INC_REG16D
    1962/     920 :                     
    1963/     920 : 26 38               	MVI  E,lo(REG16_THISLINE_PTR)
    1964/     922 : 46 68 03            	CALL MOV_REG16E_MEMREG16D
    1965/     925 : 46 99 02            	CALL INC_REG16D
    1966/     928 : 46 99 02            	CALL INC_REG16D
    1967/     92B :                     
    1968/     92B : 26 00               	MVI  E,lo(REG16_INDEX)
    1969/     92D : 46 68 03            	CALL MOV_REG16E_MEMREG16D
    1970/     930 : 46 99 02            	CALL INC_REG16D
    1971/     933 : 46 99 02            	CALL INC_REG16D
    1972/     936 :                     
    1973/     936 :                     VTL_RUN_NEXTLINE:
    1974/     936 : 1E 3A               	MVI  D,lo(REG16_NEXTLINE_PTR)
    1975/     938 : 26 3C               	MVI  E,lo(REG16_PEND)
    1976/     93A : 46 FC 06            	CALL CMP_UNSIGNED_REG16D_REG16E
    1977/     93D : 40 D8 07            	JNC  VTL_MAIN		; exit if REG(NEXTLINE_PTR) >= REG(PEND)
    1978/     940 : 1E 00               	MVI  D,lo(REG16_INDEX)
    1979/     942 : 26 3A               	MVI  E,lo(REG16_NEXTLINE_PTR)
    1980/     944 : 46 58 02            	CALL MOV_REG16D_REG16E		; REG(INDEX) = REG(NEXTLINE_PTR)
    1981/     947 : 44 F1 08            	JMP  VTL_RUN_PROGRAM_MINDEX	; continue running program
    1982/     94A :                     
    1983/     94A :                     ;;;----------------------------------------------------------------------------
    1984/     94A :                     ;;; VTL_EXECUTE_MINDEX
    1985/     94A :                     ;;; Execute a string *REG(INDEX)
    1986/     94A :                     ;;; destroy: HL,A,BC,DE
    1987/     94A :                     ;;;----------------------------------------------------------------------------
    1988/     94A :                     VTL_RUN_SINGLE_LINE:
    1989/     94A :                     ;;; 	JMP VTL_EXECUTE_MINDEX
    1990/     94A :                     VTL_EXECUTE_MINDEX:
    1991/     94A :                     	;; if some initialization is needed, write here
    1992/     94A :                     VTL_EXECUTE_MINDEX_CONTINUE:
    1993/     94A : 1E 00               	MVI D,lo(REG16_INDEX)
    1994/     94C :                     
    1995/     94C :                     SKIPSPACE:
    1996/     94C : 46 20 03            	CALL MOV_A_MEMREG16D
    1997/     94F : 3C 20               	CPI  ' '
    1998/     951 : 48 5A 09            	JNZ .NEXT
    1999/     954 : 46 99 02            	CALL INC_REG16D		  ; REG(INDEX)++ while ' '
    2000/     957 : 44 4C 09            	JMP  SKIPSPACE
    2001/     95A :                     .NEXT:
    2002/     95A :                     	; check the left term
    2003/     95A : A0                  	ANA  A
    2004/     95B : 68 36 09            	JZ   VTL_RUN_NEXTLINE ; EOF then return to the run loop
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 37 - 2024年08月18日 14時35分23秒


    2005/     95E :                     
    2006/     95E : 46 99 02            	CALL INC_REG16D		; REG(INDEX)++ index incremented in advance
    2007/     961 :                     
    2008/     961 : 3C 3F               	CPI '?' 		; '?=', '??=' or '?$='
    2009/     963 : 68 DD 09            	JZ  DISPATCH_PRINT
    2010/     966 : 3C 5D               	CPI ']'			; RETURN
    2011/     968 : 68 13 09            	JZ  VTL_RUN_PROGRAM_MINDEX_FROM_RETURN
    2012/     96B : 3C 40               	CPI '@'			; Array
    2013/     96D : 48 7D 09            	JNZ  VTL_EXEC_LEFTTERM
    2014/     970 :                     
    2015/     970 :                     GET_ARRAY_INDEX:		; evaluate index and save to REG16_ARRAYINDEX
    2016/     970 : (MACRO)              	LXI_BC .RETURN
    2016/     970 : 0E 09                       MVI B,up(.RETURN)
    2016/     972 : 16 79                       MVI C,lo(.RETURN)
    2017/     974 : 26 4E               	MVI E,lo(REG16_ARRAYINDEX)
    2018/     976 : 44 A9 0B            	JMP GETFACTOR_MINDEX_REG16E
    2019/     979 :                     .RETURN:
    2020/     979 : 1E 00               	MVI D,lo(REG16_INDEX)
    2021/     97B : 06 40               	MVI A,'@'
    2022/     97D :                     
    2023/     97D :                     VTL_EXEC_LEFTTERM:
    2024/     97D :                     	;; "left term = right expression" type procedures
    2025/     97D : 46 B0 01            	CALL PUSH_A		; push the left term
    2026/     980 :                     	;; check '='
    2027/     980 : 46 20 03            	CALL MOV_A_MEMREG16D
    2028/     983 : 3C 3D               	CPI '='
    2029/     985 : 68 8E 09            	JZ  VTL_EXEC_EQUAL_OK
    2030/     988 : 46 EE 01             	CALL POP_A		; pop the left term before go to error
    2031/     98B : 44 CB 09            	JMP VTL_EXEC_SYNTAX_ERROR
    2032/     98E :                     VTL_EXEC_EQUAL_OK:
    2033/     98E : 46 99 02             	CALL INC_REG16D
    2034/     991 :                     	;; Evaluate the right expression
    2035/     991 : (MACRO)              	LXI_BC .RETURN
    2035/     991 : 0E 09                       MVI B,up(.RETURN)
    2035/     993 : 16 9A                       MVI C,lo(.RETURN)
    2036/     995 : 26 44               	MVI E,lo(REG16_EVAL)
    2037/     997 : 44 87 0A            	JMP EVAL_EXPRESSION_MINDEX_REG16E
    2038/     99A :                     .RETURN:
    2039/     99A : 46 EE 01            	CALL POP_A		; pop the left term
    2040/     99D :                     	;; Dispatch according to the left term
    2041/     99D : 46 04 03            	CALL ISALPHA_A
    2042/     9A0 : 60 ED 09            	JC VTL_EXEC_ASSIGN_VARIABLE
    2043/     9A3 : 3C 40               	CPI '@'
    2044/     9A5 : 68 F9 09            	JZ VTL_EXEC_ARRAY
    2045/     9A8 : 3C 3B               	CPI ';'
    2046/     9AA : 68 16 0A            	JZ VTL_EXEC_IF
    2047/     9AD : 3C 23               	CPI '#'
    2048/     9AF : 68 21 0A            	JZ VTL_EXEC_GOTO
    2049/     9B2 : 3C 21               	CPI '!'
    2050/     9B4 : 68 61 0A            	JZ VTL_EXEC_GOSUB_PUSHCONTEXT_AND_GO
    2051/     9B7 : 3C 26               	CPI '&'
    2052/     9B9 : 68 33 0A            	JZ VTL_EXEC_ASSIGN_PEND
    2053/     9BC : 3C 24               	CPI '$'
    2054/     9BE : 68 3D 0A            	JZ VTL_EXEC_PUTCHAR
    2055/     9C1 : 3C 27               	CPI '\''
    2056/     9C3 : 68 48 0A              	JZ VTL_EXEC_ASSIGN_SEED
    2057/     9C6 : 3C 3E               	CPI '>'
    2058/     9C8 : 68 57 0A             	JZ VTL_EXEC_FAST_GOTO
    2059/     9CB :                     
    2060/     9CB :                     VTL_EXEC_SYNTAX_ERROR:
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 38 - 2024年08月18日 14時35分23秒


    2061/     9CB : (MACRO)              	LXI_HL REG8_ERROR2
    2061/     9CB : 2E 38                       MVI H,up(REG8_ERROR2)
    2061/     9CD : 36 70                       MVI L,lo(REG8_ERROR2)
    2062/     9CF : F8                  	MOV M,A		; ERROR2 = A
    2063/     9D0 : (MACRO)              	MVI_REG16 REG16_ERROR, STR_VTL_ERROR_SYNTAX
    2063/     9D0 :  (MACRO-2)                   LXI_HL REG16_ERROR
    2063/     9D0 : 2E 38                       MVI H,up(REG16_ERROR)
    2063/     9D2 : 36 6E                       MVI L,lo(REG16_ERROR)
    2063/     9D4 : 3E 4B                       MVI M,lo(STR_VTL_ERROR_SYNTAX)
    2063/     9D6 : 30                          INR L
    2063/     9D7 : 3E 01                       MVI M,up(STR_VTL_ERROR_SYNTAX)
    2063/     9D9 : 31                          DCR L
    2064/     9DA : 44 D8 07            	JMP VTL_MAIN
    2065/     9DD :                     
    2066/     9DD :                     DISPATCH_PRINT:	
    2067/     9DD :                     	;; check the next char to '?' and set print format
    2068/     9DD : 46 20 03            	CALL MOV_A_MEMREG16D  ; check printformat "?=" or "?$=" or "??="
    2069/     9E0 : 3C 24               	CPI '$'
    2070/     9E2 : 68 55 0E            	JZ  VTL_EXEC_PRINT_HEX2
    2071/     9E5 : 3C 3F               	CPI '?'
    2072/     9E7 : 68 77 0E            	JZ VTL_EXEC_PRINT_HEX4
    2073/     9EA :                     	;; assume that it's "?=" but not check "=" here
    2074/     9EA : 44 06 0E            	JMP VTL_EXEC_PRINT
    2075/     9ED :                     
    2076/     9ED :                     VTL_EXEC_ASSIGN_VARIABLE: ;; Assignment to the normal variable
    2077/     9ED : 46 23 05            	CALL CTOREG16NUM_A	; convert the name to the register address
    2078/     9F0 : E0                  	MOV  E,A
    2079/     9F1 : 1E 44               	MVI  D,lo(REG16_EVAL)
    2080/     9F3 : 46 65 02            	CALL MOV_REG16E_REG16D
    2081/     9F6 : 44 4A 09            	JMP VTL_EXECUTE_MINDEX_CONTINUE ; execute remaining string
    2082/     9F9 :                     
    2083/     9F9 :                     VTL_EXEC_ARRAY: 	;; Assignment to Array
    2084/     9F9 : 1E 4E               	MVI D,lo(REG16_ARRAYINDEX)
    2085/     9FB : C3                  	MOV A,D
    2086/     9FC : 46 99 05            	CALL MUL2_REG16A
    2087/     9FF : 26 52               	MVI E,lo(REG16_TMP)
    2088/     A01 : 2E 38               	MVI H,REGPAGE
    2089/     A03 : F4                  	MOV L,E
    2090/     A04 : 3E 00               	MVI M,lo(ARRAYTOP)
    2091/     A06 : 30                  	INR L
    2092/     A07 : 3E 39               	MVI M,up(ARRAYTOP)
    2093/     A09 : 46 6D 05            	CALL ADD_REG16D_REG16E	; now, REG(ARRAYINDEX) is address of
    2094/     A0C :                     				; the array item (ARRAYTOP+ARRAYINDEX*2)
    2095/     A0C : 1E 4E               	MVI  D,lo(REG16_ARRAYINDEX)
    2096/     A0E : 26 44               	MVI  E,lo(REG16_EVAL)
    2097/     A10 : 46 89 03            	CALL MOV_MEMREG16D_REG16E       ; *REG(ARRAYINDEX)=REG(EVAL)
    2098/     A13 : 44 4A 09            	JMP  VTL_EXECUTE_MINDEX_CONTINUE ; execute remaining string
    2099/     A16 :                     	
    2100/     A16 :                     VTL_EXEC_IF:
    2101/     A16 : 1E 44               	MVI  D,lo(REG16_EVAL)
    2102/     A18 : 46 57 05            	CALL ISZERO_REG16D
    2103/     A1B : 68 36 09            	JZ   VTL_RUN_NEXTLINE ; go to next line
    2104/     A1E : 44 4A 09            	JMP  VTL_EXECUTE_MINDEX_CONTINUE ; execute remaining string
    2105/     A21 :                     
    2106/     A21 :                     VTL_EXEC_GOTO:
    2107/     A21 : 1E 44               	MVI  D,lo(REG16_EVAL)
    2108/     A23 : 46 57 05            	CALL ISZERO_REG16D
    2109/     A26 : 68 4A 09            	JZ   VTL_EXECUTE_MINDEX_CONTINUE ; execute remaining string
    2110/     A29 : 1E 36               	MVI  D,lo(REG16_LINENUM)
    2111/     A2B : 26 44               	MVI  E,lo(REG16_EVAL)
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 39 - 2024年08月18日 14時35分23秒


    2112/     A2D : 46 58 02            	CALL MOV_REG16D_REG16E
    2113/     A30 : 44 B4 08            	JMP  FIND_LINE_AND_EXEC	         ; execute GOTO
    2114/     A33 :                     
    2115/     A33 :                     VTL_EXEC_ASSIGN_PEND:
    2116/     A33 : 1E 3C               	MVI  D,lo(REG16_PEND)
    2117/     A35 : 26 44               	MVI  E,lo(REG16_EVAL)
    2118/     A37 : 46 58 02            	CALL MOV_REG16D_REG16E
    2119/     A3A : 44 4A 09            	JMP  VTL_EXECUTE_MINDEX_CONTINUE ; execute remaining string
    2120/     A3D :                     
    2121/     A3D :                     VTL_EXEC_PUTCHAR:
    2122/     A3D : 2E 38               	MVI H,REGPAGE
    2123/     A3F : 36 44               	MVI L,lo(REG16_EVAL)
    2124/     A41 : C7                  	MOV A,M
    2125/     A42 : 46 40 00            	CALL PUTCH
    2126/     A45 : 44 4A 09            	JMP VTL_EXECUTE_MINDEX_CONTINUE ; execute remaining string
    2127/     A48 :                     
    2128/     A48 :                     VTL_EXEC_ASSIGN_SEED: 	;;  seed of random number
    2129/     A48 :                     	;; REG(RANDOM0)=REG(RANDOM1)=seed
    2130/     A48 : 26 44               	MVI  E,lo(REG16_EVAL)
    2131/     A4A : 1E 4A               	MVI  D,lo(REG16_RANDOM0)
    2132/     A4C : 46 58 02            	CALL MOV_REG16D_REG16E
    2133/     A4F : 1E 4C               	MVI  D,lo(REG16_RANDOM1)
    2134/     A51 : 46 58 02            	CALL MOV_REG16D_REG16E
    2135/     A54 : 44 4A 09            	JMP  VTL_EXECUTE_MINDEX_CONTINUE ; execute remaining string
    2136/     A57 :                     
    2137/     A57 :                     VTL_EXEC_FAST_GOTO: ;; Jump by loading INDEX
    2138/     A57 : 26 44               	MVI  E,lo(REG16_EVAL)
    2139/     A59 : 1E 00               	MVI  D,lo(REG16_INDEX)
    2140/     A5B : 46 58 02            	CALL MOV_REG16D_REG16E
    2141/     A5E : 44 F1 08            	JMP  VTL_RUN_PROGRAM_MINDEX
    2142/     A61 :                     
    2143/     A61 :                     ;;;----------------------------------------------------------------------------
    2144/     A61 :                     ;;; Push context (INDEX, THISLINE_PTR, NEXTLINE_PTR) to RETURNSTACK
    2145/     A61 :                     ;;; and jump to new linenumber in REG(EVAL)
    2146/     A61 :                     ;;;----------------------------------------------------------------------------
    2147/     A61 :                     VTL_EXEC_GOSUB_PUSHCONTEXT_AND_GO:
    2148/     A61 : 1E 48               	MVI  D,lo(REG16_RETURNSTACK)
    2149/     A63 :                     
    2150/     A63 : 26 00               	MVI  E,lo(REG16_INDEX)
    2151/     A65 : 46 A5 02            	CALL DEC_REG16D
    2152/     A68 : 46 A5 02            	CALL DEC_REG16D
    2153/     A6B : 46 89 03            	CALL MOV_MEMREG16D_REG16E
    2154/     A6E :                     
    2155/     A6E : 26 38               	MVI  E,lo(REG16_THISLINE_PTR)
    2156/     A70 : 46 A5 02            	CALL DEC_REG16D
    2157/     A73 : 46 A5 02            	CALL DEC_REG16D
    2158/     A76 : 46 89 03            	CALL MOV_MEMREG16D_REG16E
    2159/     A79 :                     
    2160/     A79 : 26 3A               	MVI  E,lo(REG16_NEXTLINE_PTR)
    2161/     A7B : 46 A5 02            	CALL DEC_REG16D
    2162/     A7E : 46 A5 02            	CALL DEC_REG16D
    2163/     A81 : 46 89 03            	CALL MOV_MEMREG16D_REG16E
    2164/     A84 :                     
    2165/     A84 : 44 21 0A            	JMP VTL_EXEC_GOTO
    2166/     A87 :                     
    2167/     A87 :                     ;;;----------------------------------------------------------------------------
    2168/     A87 :                     ;;; EVAL_EXPRESSION_MINDEX_REG16E
    2169/     A87 :                     ;;; Evaluate expression *REG(INDEX) and set result to REG(E)
    2170/     A87 :                     ;;; destory: HL,A
    2171/     A87 :                     ;;; return: REG(E)=result, D=INDEX
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 40 - 2024年08月18日 14時35分23秒


    2172/     A87 :                     ;;; REG16(INDEX) is incremented to the end of expression +1, (EOL if EOL)
    2173/     A87 :                     ;;; 
    2174/     A87 :                     ;;; This routine returns by RETURN_BY_PCSTACK.
    2175/     A87 :                     ;;; Subroutine call for this routine is set return address to BC and JMP.
    2176/     A87 :                     ;;;----------------------------------------------------------------------------
    2177/     A87 :                     EVAL_EXPRESSION_MINDEX_REG16E:
    2178/     A87 : 46 7E 01            	CALL PUSH_BC_PCSTACK ; PUSH a return address
    2179/     A8A : 46 DE 01            	CALL PUSH_DE
    2180/     A8D :                     	
    2181/     A8D : 1E 00               	MVI D,lo(REG16_INDEX)
    2182/     A8F : 46 20 03            	CALL MOV_A_MEMREG16D
    2183/     A92 : A0                  	ANA A       ; check EOL
    2184/     A93 : 48 A5 0A            	JNZ EVAL_START
    2185/     A96 :                     	;; EOL and EXIT
    2186/     A96 :                     	;; Do nothing, and REG(EVAL) does not change.
    2187/     A96 : 2E 38               	MVI H,REGPAGE
    2188/     A98 : (MACRO)              	MVI_REG16 REG16_ERROR, STR_VTL_ERROR_EOL
    2188/     A98 :  (MACRO-2)                   LXI_HL REG16_ERROR
    2188/     A98 : 2E 38                       MVI H,up(REG16_ERROR)
    2188/     A9A : 36 6E                       MVI L,lo(REG16_ERROR)
    2188/     A9C : 3E 5D                       MVI M,lo(STR_VTL_ERROR_EOL)
    2188/     A9E : 30                          INR L
    2188/     A9F : 3E 01                       MVI M,up(STR_VTL_ERROR_EOL)
    2188/     AA1 : 31                          DCR L
    2189/     AA2 : 44 D8 07            	JMP VTL_MAIN		; error and jump to VTL_MAIN
    2190/     AA5 :                     
    2191/     AA5 :                     EVAL_START:	
    2192/     AA5 :                     	;; get a factor and push it
    2193/     AA5 : 26 3E               	MVI E,lo(REG16_LVALUE)
    2194/     AA7 : (MACRO)              	LXI_BC .RETURN
    2194/     AA7 : 0E 0A                       MVI B,up(.RETURN)
    2194/     AA9 : 16 AE                       MVI C,lo(.RETURN)
    2195/     AAB : 44 A9 0B            	JMP GETFACTOR_MINDEX_REG16E
    2196/     AAE :                     .RETURN:	
    2197/     AAE :                     EVAL_CONTINUE:
    2198/     AAE : 06 3E               	MVI  A,lo(REG16_LVALUE)
    2199/     AB0 : 46 2C 02            	CALL PUSH_REG16A		; push the LVALUE
    2200/     AB3 : 1E 00               	MVI  D,lo(REG16_INDEX)
    2201/     AB5 : 46 20 03            	CALL MOV_A_MEMREG16D		; get an operator
    2202/     AB8 : A0                  	ANA  A				; no operator and EOL, then exit
    2203/     AB9 : 68 30 0B            	JZ   EVAL_EXIT
    2204/     ABC : 46 99 02            	CALL INC_REG16D			; increment INDEX if not EOL
    2205/     ABF :                     
    2206/     ABF : 3C 29               	CPI ')'
    2207/     AC1 : 68 30 0B            	JZ  EVAL_EXIT			; if ')', then exit
    2208/     AC4 : 3C 20               	CPI ' '
    2209/     AC6 : 68 30 0B            	JZ  EVAL_EXIT			; if ' ', then exit
    2210/     AC9 :                     
    2211/     AC9 : 46 B0 01            	CALL PUSH_A			; push the operator
    2212/     ACC :                     
    2213/     ACC : (MACRO)              	LXI_BC .RETURN
    2213/     ACC : 0E 0A                       MVI B,up(.RETURN)
    2213/     ACE : 16 D5                       MVI C,lo(.RETURN)
    2214/     AD0 : 26 40               	MVI E,lo(REG16_RVALUE)
    2215/     AD2 : 44 A9 0B            	JMP GETFACTOR_MINDEX_REG16E   ; get RVALUE
    2216/     AD5 :                     .RETURN:	
    2217/     AD5 : 46 EE 01            	CALL POP_A
    2218/     AD8 : C8                  	MOV B,A			        ; pop the operator and store to B
    2219/     AD9 :                     
    2220/     AD9 : 1E 3E               	MVI D,lo(REG16_LVALUE)		; set D = REG_LVALUE
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 41 - 2024年08月18日 14時35分23秒


    2221/     ADB : 26 40               	MVI E,lo(REG16_RVALUE)		; set E = REG_RVALUE
    2222/     ADD : C3                  	MOV A,D
    2223/     ADE : 46 42 02            	CALL POP_REG16A		        ; pop the LVALUE
    2224/     AE1 :                     ;;; 
    2225/     AE1 :                     ;;;  execute operator calculation
    2226/     AE1 :                     ;;; 
    2227/     AE1 : C1                  	MOV  A,B			; restore the operator from B
    2228/     AE2 :                     	;; dispatch by the operator
    2229/     AE2 : 3C 2B               	CPI '+'
    2230/     AE4 : 68 42 0B            	JZ EVAL_ADD
    2231/     AE7 : 3C 2D               	CPI '-'
    2232/     AE9 : 68 48 0B            	JZ EVAL_SUB
    2233/     AEC : 3C 2A               	CPI '*'
    2234/     AEE : 68 4E 0B            	JZ EVAL_MUL
    2235/     AF1 : 3C 2F               	CPI '/'
    2236/     AF3 : 68 54 0B            	JZ EVAL_DIV
    2237/     AF6 : 3C 3D               	CPI '='
    2238/     AF8 : 68 5A 0B            	JZ EVAL_EQU
    2239/     AFB : 3C 3C               	CPI '<'
    2240/     AFD : 68 71 0B            	JZ EVAL_LE
    2241/     B00 : 3C 3E               	CPI '>'		; > or =
    2242/     B02 : 68 7A 0B            	JZ EVAL_GEQ
    2243/     B05 : 3C 23               	CPI '#'		; not equal
    2244/     B07 : 68 83 0B            	JZ EVAL_NEQ
    2245/     B0A : 3C 25               	CPI '%'		; reminder
    2246/     B0C : 68 8C 0B            	JZ EVAL_REM
    2247/     B0F : 3C 5E               	CPI '^'		; exclusive-or
    2248/     B11 : 68 97 0B            	JZ EVAL_XOR
    2249/     B14 : 3C 26               	CPI '&'		; and
    2250/     B16 : 68 9D 0B            	JZ EVAL_AND
    2251/     B19 : 3C 7C               	CPI '|'		; or
    2252/     B1B : 68 A3 0B            	JZ EVAL_OR
    2253/     B1E :                     
    2254/     B1E :                     	;; ERROR (unknown operator)
    2255/     B1E : (MACRO)              	LXI_HL REG8_ERROR2
    2255/     B1E : 2E 38                       MVI H,up(REG8_ERROR2)
    2255/     B20 : 36 70                       MVI L,lo(REG8_ERROR2)
    2256/     B22 : F8                  	MOV M,A			; ERROR2 = A
    2257/     B23 : (MACRO)              	MVI_REG16 REG16_ERROR, STR_VTL_ERROR_OPERATOR
    2257/     B23 :  (MACRO-2)                   LXI_HL REG16_ERROR
    2257/     B23 : 2E 38                       MVI H,up(REG16_ERROR)
    2257/     B25 : 36 6E                       MVI L,lo(REG16_ERROR)
    2257/     B27 : 3E 57                       MVI M,lo(STR_VTL_ERROR_OPERATOR)
    2257/     B29 : 30                          INR L
    2257/     B2A : 3E 01                       MVI M,up(STR_VTL_ERROR_OPERATOR)
    2257/     B2C : 31                          DCR L
    2258/     B2D : 44 D8 07            	JMP VTL_MAIN		; error and jump to VTL_MAIN
    2259/     B30 :                     
    2260/     B30 :                     EVAL_EXIT:
    2261/     B30 : 06 52               	MVI A,lo(REG16_TMP)
    2262/     B32 : 46 42 02            	CALL POP_REG16A		; return with stacked value
    2263/     B35 :                     
    2264/     B35 : 46 1C 02            	CALL POP_DE
    2265/     B38 : 1E 52               	MVI  D,lo(REG16_TMP)
    2266/     B3A : 46 65 02            	CALL MOV_REG16E_REG16D	; load result to REG(E)
    2267/     B3D :                     
    2268/     B3D : 1E 00               	MVI D,lo(REG16_INDEX)	; restore D to INDEX
    2269/     B3F : 44 8E 01            	JMP RETURN_BY_PCSTACK
    2270/     B42 :                     
    2271/     B42 :                     EVAL_ADD:
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 42 - 2024年08月18日 14時35分23秒


    2272/     B42 : 46 6D 05            	CALL ADD_REG16D_REG16E
    2273/     B45 : 44 AE 0A            	JMP EVAL_CONTINUE
    2274/     B48 :                     
    2275/     B48 :                     EVAL_SUB:
    2276/     B48 : 46 81 05            	CALL SUB_REG16D_REG16E
    2277/     B4B : 44 AE 0A            	JMP  EVAL_CONTINUE
    2278/     B4E :                     
    2279/     B4E :                     EVAL_MUL:
    2280/     B4E : 46 B5 05            	CALL MUL_REG16D_REG16E
    2281/     B51 : 44 AE 0A            	JMP  EVAL_CONTINUE
    2282/     B54 :                     
    2283/     B54 :                     EVAL_DIV:
    2284/     B54 : 46 72 06            	CALL DIV_REG16D_REG16E
    2285/     B57 : 44 AE 0A            	JMP  EVAL_CONTINUE
    2286/     B5A :                     
    2287/     B5A :                     EVAL_EQU:
    2288/     B5A : 46 FC 06            	CALL CMP_UNSIGNED_REG16D_REG16E
    2289/     B5D : 68 66 0B            	JZ  EVAL_LVALUE_TRUE ; jump if REG(D)==REG(E)
    2290/     B60 :                     EVAL_LVALUE_FALSE:	
    2291/     B60 : 46 09 05            	CALL CLEAR_REG16D	; set LVALUE=0
    2292/     B63 : 44 AE 0A            	JMP EVAL_CONTINUE
    2293/     B66 :                     EVAL_LVALUE_TRUE:	
    2294/     B66 : 2E 38               	MVI H,REGPAGE
    2295/     B68 : F3                  	MOV L,D
    2296/     B69 : 3E 01               	MVI M,01H
    2297/     B6B : 30                  	INR L
    2298/     B6C : 3E 00               	MVI M,00H		; set LVALUE=1
    2299/     B6E : 44 AE 0A            	JMP EVAL_CONTINUE
    2300/     B71 :                     
    2301/     B71 :                     EVAL_LE:
    2302/     B71 : 46 0A 07             	CALL CMP_REG16D_REG16E
    2303/     B74 : 60 66 0B            	JC   EVAL_LVALUE_TRUE  ; jump if REG(D) < REG(E)
    2304/     B77 : 44 60 0B            	JMP  EVAL_LVALUE_FALSE
    2305/     B7A :                     
    2306/     B7A :                     EVAL_GEQ:
    2307/     B7A :                     ;;; '>' is TEST FOR GREATER THAN OR EQUAL TO
    2308/     B7A : 46 0A 07             	CALL CMP_REG16D_REG16E
    2309/     B7D : 60 60 0B            	JC   EVAL_LVALUE_FALSE	; jump if REG(D) < REG(E)
    2310/     B80 : 44 66 0B            	JMP  EVAL_LVALUE_TRUE	;    REG(P0) >= REG(P1)
    2311/     B83 :                     
    2312/     B83 :                     EVAL_NEQ:			; not equal
    2313/     B83 : 46 FC 06            	CALL CMP_UNSIGNED_REG16D_REG16E
    2314/     B86 : 48 66 0B            	JNZ  EVAL_LVALUE_TRUE  ; REG(D)!=REG(E)
    2315/     B89 : 44 60 0B            	JMP  EVAL_LVALUE_FALSE ; REG(D)==REG(E)
    2316/     B8C :                     
    2317/     B8C :                     EVAL_REM:
    2318/     B8C : 46 72 06            	CALL DIV_REG16D_REG16E
    2319/     B8F : 26 46               	MVI  E,lo(REG16_RMND)
    2320/     B91 : 46 58 02            	CALL MOV_REG16D_REG16E
    2321/     B94 : 44 AE 0A            	JMP EVAL_CONTINUE
    2322/     B97 :                     
    2323/     B97 :                     EVAL_XOR:
    2324/     B97 : 46 CF 06            	CALL XOR_REG16D_REG16E
    2325/     B9A : 44 AE 0A            	JMP  EVAL_CONTINUE
    2326/     B9D :                     
    2327/     B9D :                     EVAL_AND:
    2328/     B9D : 46 DE 06            	CALL AND_REG16D_REG16E
    2329/     BA0 : 44 AE 0A            	JMP  EVAL_CONTINUE
    2330/     BA3 :                     
    2331/     BA3 :                     EVAL_OR:
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 43 - 2024年08月18日 14時35分23秒


    2332/     BA3 : 46 ED 06            	CALL OR_REG16D_REG16E
    2333/     BA6 : 44 AE 0A            	JMP  EVAL_CONTINUE
    2334/     BA9 :                     
    2335/     BA9 :                     ;;;----------------------------------------------------------------------------
    2336/     BA9 :                     ;;; GETFACTOR_MINDEX_REG16E
    2337/     BA9 :                     ;;; Get a value of the first factor from MINDEX and set it to REG(D)
    2338/     BA9 :                     ;;; 
    2339/     BA9 :                     ;;; This routine returns by RETURN_BY_PCSTACK.
    2340/     BA9 :                     ;;; Subroutine call for this routine is set return address to BC and JMP.
    2341/     BA9 :                     ;;;----------------------------------------------------------------------------
    2342/     BA9 :                     GETFACTOR_MINDEX_REG16E:
    2343/     BA9 : 46 7E 01            	CALL PUSH_BC_PCSTACK; PUSH a return address
    2344/     BAC : 46 DE 01            	CALL PUSH_DE
    2345/     BAF :                     
    2346/     BAF : 1E 00               	MVI D,lo(REG16_INDEX)
    2347/     BB1 : 46 20 03            	CALL MOV_A_MEMREG16D
    2348/     BB4 :                     	;;; dispatch by the term
    2349/     BB4 : 3C 28               	CPI '('
    2350/     BB6 : 68 13 0C            	JZ GETFACTOR_LEFTBRACE
    2351/     BB9 :                     
    2352/     BB9 : 26 42               	MVI E,lo(REG16_FACTOR)	; REG(E) is REG16_FACTOR
    2353/     BBB : 3C 2D               	CPI '-' 		; unary operator minus '-' 
    2354/     BBD : 68 22 0C            	JZ  GETFACTOR_MINUS
    2355/     BC0 : 46 E0 02            	CALL ISNUM_A
    2356/     BC3 : 60 36 0C            	JC  GETFACTOR_DECIMAL_NUMBER
    2357/     BC6 : 46 04 03            	CALL ISALPHA_A
    2358/     BC9 : 60 3E 0C            	JC  GETFACTOR_VARIABLE
    2359/     BCC : 3C 40               	CPI '@'
    2360/     BCE : 68 4A 0C            	JZ  GETFACTOR_ARRAY
    2361/     BD1 : 3C 25               	CPI '%'			; remainder of the last DIV
    2362/     BD3 : 68 75 0C            	JZ  GETFACTOR_REMAINDER
    2363/     BD6 : 3C 23                	CPI '#'
    2364/     BD8 : 68 7D 0C             	JZ  GETFACTOR_THISLINE
    2365/     BDB : 3C 27               	CPI '\''		; random number
    2366/     BDD : 68 85 0C            	JZ  GETFACTOR_RANDOM
    2367/     BE0 : 3C 26               	CPI '&'			; the last byte of program
    2368/     BE2 : 68 98 0C            	JZ  GETFACTOR_PEND
    2369/     BE5 : 3C 24               	CPI '$'
    2370/     BE7 : 68 A0 0C            	JZ  GETFACTOR_GETCH	; input one charactoer from serial
    2371/     BEA : 3C 3F               	CPI '?'			; input one line from serial and evaluate it
    2372/     BEC : 68 AE 0C            	JZ  GETFACTOR_GETVALUE
    2373/     BEF :                     
    2374/     BEF :                     GETFACTOR_ERROR:
    2375/     BEF : (MACRO)              	LXI_HL REG8_ERROR2
    2375/     BEF : 2E 38                       MVI H,up(REG8_ERROR2)
    2375/     BF1 : 36 70                       MVI L,lo(REG8_ERROR2)
    2376/     BF3 : F8                  	MOV M,A
    2377/     BF4 : (MACRO)              	MVI_REG16 REG16_ERROR,STR_VTL_ERROR_FACTOR
    2377/     BF4 :  (MACRO-2)                   LXI_HL REG16_ERROR
    2377/     BF4 : 2E 38                       MVI H,up(REG16_ERROR)
    2377/     BF6 : 36 6E                       MVI L,lo(REG16_ERROR)
    2377/     BF8 : 3E 64                       MVI M,lo(STR_VTL_ERROR_FACTOR)
    2377/     BFA : 30                          INR L
    2377/     BFB : 3E 01                       MVI M,up(STR_VTL_ERROR_FACTOR)
    2377/     BFD : 31                          DCR L
    2378/     BFE : 44 D8 07            	JMP VTL_MAIN		; error and jump to VTL_MAIN
    2379/     C01 :                     
    2380/     C01 :                     GETFACTOR_EXIT:
    2381/     C01 : 1E 00               	MVI  D,lo(REG16_INDEX)
    2382/     C03 : 46 99 02            	CALL INC_REG16D		; increment REG(INDEX)
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 44 - 2024年08月18日 14時35分23秒


    2383/     C06 :                     GETFACTOR_EXIT_NOINCREMENT:
    2384/     C06 : 46 1C 02            	CALL POP_DE
    2385/     C09 : 1E 42               	MVI  D,lo(REG16_FACTOR)
    2386/     C0B : 46 65 02            	CALL MOV_REG16E_REG16D	; load result to REG(E)
    2387/     C0E : 1E 00               	MVI  D,lo(REG16_INDEX)	; set D to INDEX
    2388/     C10 : 44 8E 01            	JMP  RETURN_BY_PCSTACK
    2389/     C13 :                     	
    2390/     C13 :                     GETFACTOR_LEFTBRACE:	
    2391/     C13 : 46 99 02            	CALL INC_REG16D
    2392/     C16 : (MACRO)              	LXI_BC .RETURN
    2392/     C16 : 0E 0C                       MVI B,up(.RETURN)
    2392/     C18 : 16 1F                       MVI C,lo(.RETURN)
    2393/     C1A : 26 42               	MVI E,lo(REG16_FACTOR)
    2394/     C1C : 44 87 0A            	JMP EVAL_EXPRESSION_MINDEX_REG16E
    2395/     C1F :                     .RETURN:
    2396/     C1F : 44 06 0C            	JMP GETFACTOR_EXIT_NOINCREMENT
    2397/     C22 :                     
    2398/     C22 :                     GETFACTOR_MINUS:
    2399/     C22 : 46 99 02            	CALL INC_REG16D
    2400/     C25 : (MACRO)              	LXI_BC .RETURN
    2400/     C25 : 0E 0C                       MVI B,up(.RETURN)
    2400/     C27 : 16 2E                       MVI C,lo(.RETURN)
    2401/     C29 : 26 42               	MVI E,lo(REG16_FACTOR)
    2402/     C2B : 44 A9 0B            	JMP GETFACTOR_MINDEX_REG16E
    2403/     C2E :                     .RETURN:
    2404/     C2E :                     	;; REG(FACTOR)=-REG(FACTOR) (2's complement)
    2405/     C2E : 1E 42               	MVI D,lo(REG16_FACTOR)
    2406/     C30 : 46 48 05            	CALL COMPLEMENT2_REG16D	; REG(D)=-REG(D)
    2407/     C33 : 44 06 0C            	JMP GETFACTOR_EXIT_NOINCREMENT
    2408/     C36 :                     
    2409/     C36 :                     GETFACTOR_DECIMAL_NUMBER:	;; decimal number
    2410/     C36 : 26 42               	MVI  E,lo(REG16_FACTOR)
    2411/     C38 : 46 31 04            	CALL GETNUMBER_MEMREG16D_REG16E
    2412/     C3B : 44 06 0C            	JMP  GETFACTOR_EXIT_NOINCREMENT
    2413/     C3E :                     
    2414/     C3E :                     GETFACTOR_VARIABLE:	;; variable
    2415/     C3E : 46 23 05            	CALL CTOREG16NUM_A
    2416/     C41 : E0                  	MOV E,A
    2417/     C42 : 1E 42               	MVI D,lo(REG16_FACTOR)
    2418/     C44 : 46 58 02            	CALL MOV_REG16D_REG16E
    2419/     C47 : 44 01 0C            	JMP GETFACTOR_EXIT
    2420/     C4A :                     
    2421/     C4A :                     GETFACTOR_ARRAY:
    2422/     C4A :                     	;; 16bit array
    2423/     C4A :                     	;; @(x) = 16bit data at VTL_ARRAYTOP+x*2
    2424/     C4A : 46 99 02            	CALL INC_REG16D
    2425/     C4D : (MACRO)              	LXI_BC .RETURN
    2425/     C4D : 0E 0C                       MVI B,up(.RETURN)
    2425/     C4F : 16 56                       MVI C,lo(.RETURN)
    2426/     C51 : 26 50               	MVI E,lo(REG16_TMP_ARRAY)
    2427/     C53 : 44 A9 0B            	JMP GETFACTOR_MINDEX_REG16E
    2428/     C56 :                     .RETURN:
    2429/     C56 : C4                  	MOV A,E
    2430/     C57 : 46 99 05            	CALL MUL2_REG16A
    2431/     C5A : 1E 52               	MVI D,lo(REG16_TMP)
    2432/     C5C : 2E 38               	MVI H,REGPAGE
    2433/     C5E : F3                  	MOV L,D
    2434/     C5F : 3E 00               	MVI M,lo(ARRAYTOP)
    2435/     C61 : 30                  	INR L
    2436/     C62 : 3E 39               	MVI M,up(ARRAYTOP)
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 45 - 2024年08月18日 14時35分23秒


    2437/     C64 : 46 6D 05            	CALL ADD_REG16D_REG16E
    2438/     C67 : 26 42               	MVI E,lo(REG16_FACTOR)
    2439/     C69 : 46 68 03            	CALL MOV_REG16E_MEMREG16D
    2440/     C6C : 46 99 02            	CALL INC_REG16D
    2441/     C6F : 46 99 02            	CALL INC_REG16D
    2442/     C72 : 44 06 0C            	JMP GETFACTOR_EXIT_NOINCREMENT
    2443/     C75 :                     
    2444/     C75 :                     GETFACTOR_REMAINDER:
    2445/     C75 : 1E 46               	MVI  D,lo(REG16_RMND)
    2446/     C77 : 46 65 02            	CALL MOV_REG16E_REG16D
    2447/     C7A : 44 01 0C            	JMP GETFACTOR_EXIT
    2448/     C7D :                     
    2449/     C7D :                     GETFACTOR_THISLINE: ; this line pointer
    2450/     C7D : 1E 38                	MVI D,lo(REG16_THISLINE_PTR)
    2451/     C7F : 46 65 02             	CALL MOV_REG16E_REG16D
    2452/     C82 : 44 01 0C             	JMP GETFACTOR_EXIT
    2453/     C85 :                     
    2454/     C85 :                     GETFACTOR_RANDOM:
    2455/     C85 : 46 37 07            	CALL MAKE_RANDOMNUMBER
    2456/     C88 : 1E 4C               	MVI D,lo(REG16_RANDOM1)
    2457/     C8A : 46 65 02            	CALL MOV_REG16E_REG16D
    2458/     C8D :                     	;; result &= 7FFFH
    2459/     C8D : 2E 38               	MVI H,REGPAGE
    2460/     C8F : F4                  	MOV L,E
    2461/     C90 : 30                  	INR L
    2462/     C91 : C7                  	MOV A,M
    2463/     C92 : 24 7F               	ANI 7FH
    2464/     C94 : F8                  	MOV M,A
    2465/     C95 : 44 01 0C            	JMP GETFACTOR_EXIT
    2466/     C98 :                     
    2467/     C98 :                     GETFACTOR_PEND:
    2468/     C98 : 1E 3C               	MVI  D,lo(REG16_PEND)
    2469/     C9A : 46 65 02            	CALL MOV_REG16E_REG16D
    2470/     C9D : 44 01 0C            	JMP GETFACTOR_EXIT
    2471/     CA0 :                     
    2472/     CA0 :                     GETFACTOR_GETCH:
    2473/     CA0 : 46 4A 00            	CALL GETCH
    2474/     CA3 : 2E 38               	MVI H,REGPAGE
    2475/     CA5 : 36 42               	MVI L,lo(REG16_FACTOR)
    2476/     CA7 : F8                  	MOV M,A
    2477/     CA8 : 30                  	INR L
    2478/     CA9 : 3E 00               	MVI M,0
    2479/     CAB : 44 01 0C            	JMP GETFACTOR_EXIT
    2480/     CAE :                     
    2481/     CAE :                     GETFACTOR_GETVALUE:  ; input one line from serial and evaluate it
    2482/     CAE : 1E 00               	MVI  D,lo(REG16_INDEX)
    2483/     CB0 : C3                  	MOV  A,D
    2484/     CB1 : 46 2C 02            	CALL PUSH_REG16A	; push REG(INDEX)
    2485/     CB4 : 2E 38               	MVI H,REGPAGE
    2486/     CB6 : F3                  	MOV L,D
    2487/     CB7 : 3E 00               	MVI M,lo(LINEBUF)
    2488/     CB9 : 30                  	INR L
    2489/     CBA : 3E 3D               	MVI M,up(LINEBUF) ; REG(INDEX) = LNEBUF
    2490/     CBC : 46 A8 03            	CALL GETLINE_MEMREG16D	; get line input
    2491/     CBF :                     
    2492/     CBF : 26 42               	MVI E,lo(REG16_FACTOR)
    2493/     CC1 : (MACRO)              	LXI_BC .RETURN
    2493/     CC1 : 0E 0C                       MVI B,up(.RETURN)
    2493/     CC3 : 16 C8                       MVI C,lo(.RETURN)
    2494/     CC5 : 44 87 0A            	JMP EVAL_EXPRESSION_MINDEX_REG16E ; eval it
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 46 - 2024年08月18日 14時35分23秒


    2495/     CC8 :                     .RETURN:
    2496/     CC8 : 06 00               	MVI A,lo(REG16_INDEX)
    2497/     CCA : 46 42 02            	CALL POP_REG16A		; pop REG(INDEX)
    2498/     CCD : 44 01 0C            	JMP GETFACTOR_EXIT
    2499/     CD0 :                     
    2500/     CD0 :                     ;;;----------------------------------------------------------------------------
    2501/     CD0 :                     ;;; VTL_INSERT_PROGRAMLINE
    2502/     CD0 :                     ;;; Input program line to program area
    2503/     CD0 :                     ;;;----------------------------------------------------------------------------
    2504/     CD0 :                     VTL_INSERT_PROGRAMLINE:
    2505/     CD0 :                     	;; 	include "stacktest.inc"
    2506/     CD0 :                     	;; 	include "numbertest.inc"
    2507/     CD0 : 1E 00               	MVI D,lo(REG16_INDEX)  ; this can be omitted?
    2508/     CD2 : 26 52               	MVI E,lo(REG16_TMP)
    2509/     CD4 : 46 31 04            	CALL GETNUMBER_MEMREG16D_REG16E ; REG(TMP)=LINENUMBER
    2510/     CD7 : F4                  	MOV L,E
    2511/     CD8 : 46 58 05            	CALL ISZERO_REG16L
    2512/     CDB : 68 24 0D            	JZ   PRINT_LIST
    2513/     CDE :                     
    2514/     CDE : 46 99 02            	CALL INC_REG16D		; skip ' ' without check for symplification
    2515/     CE1 :                     
    2516/     CE1 : 1E 3C               	MVI  D,lo(REG16_PEND)
    2517/     CE3 : 46 89 03            	CALL MOV_MEMREG16D_REG16E ; *REG(PEND)=REG(TMP)
    2518/     CE6 : 46 99 02            	CALL INC_REG16D		  ; REG(PEND)+=2
    2519/     CE9 : 46 99 02            	CALL INC_REG16D
    2520/     CEC :                     
    2521/     CEC : C3                  	MOV  A,D
    2522/     CED : 46 2C 02             	CALL PUSH_REG16A	; PUSH(REG(PEND)) to write a pointer
    2523/     CF0 :                     				; to the next line afterward
    2524/     CF0 : 46 99 02            	CALL INC_REG16D		; make a space to write NEXTLINE_PTR
    2525/     CF3 : 46 99 02            	CALL INC_REG16D		; PEND=PEND+2
    2526/     CF6 :                     	
    2527/     CF6 :                     INSERT_PROGRAM_LOOP:
    2528/     CF6 : 1E 00               	MVI  D,lo(REG16_INDEX)
    2529/     CF8 : 46 20 03            	CALL MOV_A_MEMREG16D
    2530/     CFB : A0                  	ANA  A			; EOL
    2531/     CFC : 68 0D 0D            	JZ   INSERT_PROGRAM_EXIT
    2532/     CFF : 46 99 02            	CALL INC_REG16D		; REG(INDEX)++
    2533/     D02 : 1E 3C               	MVI  D,lo(REG16_PEND)
    2534/     D04 : 46 2F 03            	CALL MOV_MEMREG16D_A	; copy *REG(INDEX) to *REG(PEND)
    2535/     D07 : 46 99 02            	CALL INC_REG16D		; REG(PEND)++
    2536/     D0A :                     	;; the end of memory check is omitted for simplicity
    2537/     D0A : 44 F6 0C            	JMP INSERT_PROGRAM_LOOP	;
    2538/     D0D :                     	
    2539/     D0D :                     INSERT_PROGRAM_EXIT:
    2540/     D0D : 1E 3C               	MVI D,lo(REG16_PEND)
    2541/     D0F : A8                  	XRA A
    2542/     D10 : 46 2F 03            	CALL MOV_MEMREG16D_A	; write EOL and increment REG(PEND)
    2543/     D13 : 46 99 02            	CALL INC_REG16D
    2544/     D16 :                     
    2545/     D16 : 1E 52               	MVI D,lo(REG16_TMP)	
    2546/     D18 : C3                  	MOV A,D			; pop the place to write the next line pointer
    2547/     D19 : 46 42 02            	CALL POP_REG16A		; (the top+2 of this line) to REG(TMP)
    2548/     D1C :                     	
    2549/     D1C : 26 3C               	MVI E,lo(REG16_PEND)
    2550/     D1E : 46 89 03            	CALL MOV_MEMREG16D_REG16E; BC=REG(PEND)
    2551/     D21 :                     
    2552/     D21 : 44 79 08            	JMP VTL_LOOP
    2553/     D24 :                     
    2554/     D24 :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 47 - 2024年08月18日 14時35分23秒


    2555/     D24 :                     ;;; PRINT_LIST:
    2556/     D24 :                     ;;; Print program list
    2557/     D24 :                     ;;;----------------------------------------------------------------------------
    2558/     D24 :                     PRINT_LIST:
    2559/     D24 : (MACRO)              	MVI_REG16 REG16_INDEX,PROGRAM_START
    2559/     D24 :  (MACRO-2)                   LXI_HL REG16_INDEX
    2559/     D24 : 2E 38                       MVI H,up(REG16_INDEX)
    2559/     D26 : 36 00                       MVI L,lo(REG16_INDEX)
    2559/     D28 : 3E 00                       MVI M,lo(PROGRAM_START)
    2559/     D2A : 30                          INR L
    2559/     D2B : 3E 10                       MVI M,up(PROGRAM_START)
    2559/     D2D : 31                          DCR L
    2560/     D2E : DE                  	MOV D,L
    2561/     D2F :                     
    2562/     D2F :                     .LOOP:
    2563/     D2F : 26 3C               	MVI E,lo(REG16_PEND)
    2564/     D31 : 46 FC 06            	CALL CMP_UNSIGNED_REG16D_REG16E
    2565/     D34 : 40 D8 07            	JNC VTL_MAIN        ;REG(D) >= REG(PEND) then exit to VTL_MAIN
    2566/     D37 :                     
    2567/     D37 :                     	;; Get line number
    2568/     D37 : 26 36               	MVI  E,lo(REG16_LINENUM)
    2569/     D39 : 46 68 03            	CALL MOV_REG16E_MEMREG16D
    2570/     D3C : 46 99 02            	CALL INC_REG16D
    2571/     D3F : 46 99 02            	CALL INC_REG16D
    2572/     D42 :                     
    2573/     D42 : 46 5C 0D            	CALL PRINT_REG16E
    2574/     D45 : (MACRO)              	PUTCHAR ' '
    2574/     D45 : 06 20                       MVI  A,' '
    2574/     D47 : 46 40 00                    CALL PUTCH
    2575/     D4A :                     	
    2576/     D4A : 46 99 02            	CALL INC_REG16D 	; skip next line pointer
    2577/     D4D : 46 99 02            	CALL INC_REG16D
    2578/     D50 :                     
    2579/     D50 : 46 94 0E            	CALL PRINTSTR_MEMREG16D
    2580/     D53 : 46 60 00            	CALL PRINT_CRLF
    2581/     D56 : 46 99 02            	CALL INC_REG16D		; increment pointer to the next char of EOL
    2582/     D59 : 44 2F 0D            	JMP .LOOP
    2583/     D5C :                     
    2584/     D5C :                     
    2585/     D5C :                     ;;;----------------------------------------------------------------------------
    2586/     D5C :                     ;;; PRINT_REG16E
    2587/     D5C :                     ;;; PRINT REG16(E) in decimal format
    2588/     D5C :                     ;;; destroy: HL
    2589/     D5C :                     ;;;----------------------------------------------------------------------------
    2590/     D5C :                     PRINT_REG16E:
    2591/     D5C : 46 CE 01            	CALL PUSH_BC
    2592/     D5F : 46 DE 01            	CALL PUSH_DE
    2593/     D62 : DC                  	MOV D,E
    2594/     D63 : 44 6C 0D            	JMP PRINT_REG16D_START
    2595/     D66 :                     ;;;----------------------------------------------------------------------------
    2596/     D66 :                     ;;; PRINT_REG16D
    2597/     D66 :                     ;;; PRINT REG16(D) in decimal format
    2598/     D66 :                     ;;; destroy: HL
    2599/     D66 :                     ;;;----------------------------------------------------------------------------
    2600/     D66 :                     PRINT_REG16D:
    2601/     D66 : 46 CE 01            	CALL PUSH_BC
    2602/     D69 : 46 DE 01            	CALL PUSH_DE
    2603/     D6C :                     
    2604/     D6C :                     PRINT_REG16D_START:
    2605/     D6C : 0E 5E               	MVI B,lo(REG16_TMP_PRINT)
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 48 - 2024年08月18日 14時35分23秒


    2606/     D6E : 46 72 02            	CALL MOV_REG16B_REG16D	; copy  REG16(D) to TMP_PRINT
    2607/     D71 : D9                  	MOV D,B			; and D points to TMP_PRINT
    2608/     D72 :                     	
    2609/     D72 : 06 46               	MVI A,lo(REG16_RMND)	; save last RMND before this PRINT
    2610/     D74 : 46 2C 02            	CALL PUSH_REG16A
    2611/     D77 :                     
    2612/     D77 : (MACRO)              	LXI_HL REG8_ZEROSUP	;
    2612/     D77 : 2E 38                       MVI H,up(REG8_ZEROSUP)
    2612/     D79 : 36 73                       MVI L,lo(REG8_ZEROSUP)
    2613/     D7B : 3E 01               	MVI M,1			; set zero supress flag
    2614/     D7D :                     	
    2615/     D7D : 46 41 05            	CALL GETSIGN_REG16D     ; Print '-' if REG(P0) < 0
    2616/     D80 : 40 8B 0D            	JNC  PRINT_POSITIVE
    2617/     D83 : 46 48 05            	CALL COMPLEMENT2_REG16D	; REG(D)=-REG(D)
    2618/     D86 : (MACRO)              	PUTCHAR '-'
    2618/     D86 : 06 2D                       MVI  A,'-'
    2618/     D88 : 46 40 00                    CALL PUTCH
    2619/     D8B :                     
    2620/     D8B :                     PRINT_POSITIVE:	
    2621/     D8B :                     	;; 10000'
    2622/     D8B : 26 74               	MVI E,lo(REG16_CONST_10000)
    2623/     D8D : 46 EB 05             	CALL DIV_UNSIGNED_REG16D_REG16E	; REG(D)=REG(D)/REG(10000)
    2624/     D90 : 46 CF 0D            	CALL PRINT_REG4D_ZEROSUP
    2625/     D93 : 26 46               	MVI E,lo(REG16_RMND)
    2626/     D95 : 46 58 02            	CALL MOV_REG16D_REG16E	; REG(D) = REG(RMND)
    2627/     D98 :                     
    2628/     D98 :                     	;; 1000'
    2629/     D98 : 26 76               	MVI E,lo(REG16_CONST_1000)
    2630/     D9A : 46 EB 05            	CALL DIV_UNSIGNED_REG16D_REG16E	; REG(D)=REG(D)/REG(1000)
    2631/     D9D : 46 CF 0D            	CALL PRINT_REG4D_ZEROSUP
    2632/     DA0 : 26 46               	MVI E,lo(REG16_RMND)
    2633/     DA2 : 46 58 02            	CALL MOV_REG16D_REG16E	; REG(D) = REG(RMND)
    2634/     DA5 :                     
    2635/     DA5 :                     	;; 100'
    2636/     DA5 : 26 78               	MVI E,lo(REG16_CONST_100)
    2637/     DA7 : 46 EB 05            	CALL DIV_UNSIGNED_REG16D_REG16E	; REG(D)=REG(D)/REG(100)
    2638/     DAA : 46 CF 0D            	CALL PRINT_REG4D_ZEROSUP
    2639/     DAD : 26 46               	MVI E,lo(REG16_RMND)
    2640/     DAF : 46 58 02            	CALL MOV_REG16D_REG16E	; REG(D) = REG(RMND)
    2641/     DB2 :                     
    2642/     DB2 :                     	;; 10'
    2643/     DB2 : 26 7A               	MVI E,lo(REG16_CONST_10)
    2644/     DB4 : 46 EB 05            	CALL DIV_UNSIGNED_REG16D_REG16E	; REG(D)=REG(D)/REG(10)
    2645/     DB7 : 46 CF 0D            	CALL PRINT_REG4D_ZEROSUP
    2646/     DBA : 26 46               	MVI E,lo(REG16_RMND)
    2647/     DBC : 46 58 02            	CALL MOV_REG16D_REG16E	; REG(D) = REG(RMND)
    2648/     DBF :                     
    2649/     DBF :                     	;; 1'
    2650/     DBF : F3                  	MOV L,D
    2651/     DC0 : C7                  	MOV A,M
    2652/     DC1 : 46 E3 0D            	CALL PRINT_4BIT_A
    2653/     DC4 :                     	
    2654/     DC4 : 06 46               	MVI  A,lo(REG16_RMND)
    2655/     DC6 : 46 42 02            	CALL POP_REG16A	                ; restore last RMND
    2656/     DC9 :                     	
    2657/     DC9 : 46 1C 02            	CALL POP_DE
    2658/     DCC : 44 0C 02            	JMP  POP_BC
    2659/     DCF :                     
    2660/     DCF :                     ;;;----------------------------------------------------------------------------
    2661/     DCF :                     ;;; PRINT_REG4D_ZEROSUP:
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 49 - 2024年08月18日 14時35分23秒


    2662/     DCF :                     ;;; PRINT REG4(D) (= lower 4bit of REG(D))
    2663/     DCF :                     ;;; if REG4(P0) !=0 then print it and clear REG(ZEROSUP) flag
    2664/     DCF :                     ;;; else if REG4(ZEROSUP) == false then print REG4(D)
    2665/     DCF :                     ;;; skip otherwise
    2666/     DCF :                     ;;;----------------------------------------------------------------------------
    2667/     DCF :                     PRINT_REG4D_ZEROSUP:
    2668/     DCF : 2E 38               	MVI H,REGPAGE
    2669/     DD1 : F3                  	MOV L,D
    2670/     DD2 : C7                  	MOV A,M
    2671/     DD3 : 24 0F               	ANI 0FH
    2672/     DD5 : 48 DD 0D            	JNZ CLEAR_AND_PRINT	; print if REG4(P0) != 0
    2673/     DD8 : 36 73               	MVI L,lo(REG8_ZEROSUP)
    2674/     DDA : C7                  	MOV A,M
    2675/     DDB : A0                  	ANA A
    2676/     DDC : 0B                  	RNZ		        ; RETURN if ZERSUP=1
    2677/     DDD :                     				; print A(=0) if ZERSUP=0
    2678/     DDD :                     CLEAR_AND_PRINT:	
    2679/     DDD : (MACRO)              	LXI_HL REG8_ZEROSUP
    2679/     DDD : 2E 38                       MVI H,up(REG8_ZEROSUP)
    2679/     DDF : 36 73                       MVI L,lo(REG8_ZEROSUP)
    2680/     DE1 : 3E 00               	MVI M,0		        ; clear ZEROSUP
    2681/     DE3 :                     PRINT_4BIT_A:
    2682/     DE3 : 04 30               	ADI 30H			;'0'
    2683/     DE5 : 44 40 00            	JMP PUTCH
    2684/     DE8 :                     
    2685/     DE8 :                     ;;;----------------------------------------------------------------------------
    2686/     DE8 :                     ;;; PRINTHEX_REG16D
    2687/     DE8 :                     ;;; PRINT REG16(D)
    2688/     DE8 :                     ;;; destroy: HL
    2689/     DE8 :                     ;;;----------------------------------------------------------------------------
    2690/     DE8 :                     PRINTHEX_REG16D:
    2691/     DE8 : 2E 38               	MVI H,REGPAGE
    2692/     DEA : F3                  	MOV L,D
    2693/     DEB : 30                  	INR L
    2694/     DEC : C7                  	MOV A,M
    2695/     DED : 46 B8 02            	CALL PRINTHEX_A
    2696/     DF0 : 2E 38               	MVI H,REGPAGE
    2697/     DF2 : F3                  	MOV L,D
    2698/     DF3 : C7                  	MOV A,M
    2699/     DF4 : 44 B8 02            	JMP PRINTHEX_A
    2700/     DF7 :                     
    2701/     DF7 :                     ;;;----------------------------------------------------------------------------
    2702/     DF7 :                     ;;; PRINTHEX_REG16E
    2703/     DF7 :                     ;;; PRINT REG16(E)
    2704/     DF7 :                     ;;; destroy: HL
    2705/     DF7 :                     ;;;----------------------------------------------------------------------------
    2706/     DF7 :                     PRINTHEX_REG16E:
    2707/     DF7 : 2E 38               	MVI H,REGPAGE
    2708/     DF9 : F4                  	MOV L,E
    2709/     DFA : 30                  	INR L
    2710/     DFB : C7                  	MOV A,M
    2711/     DFC : 46 B8 02            	CALL PRINTHEX_A
    2712/     DFF : 2E 38               	MVI H,REGPAGE
    2713/     E01 : F4                  	MOV L,E
    2714/     E02 : C7                  	MOV A,M
    2715/     E03 : 44 B8 02            	JMP PRINTHEX_A
    2716/     E06 :                     
    2717/     E06 :                     ;;;----------------------------------------------------------------------------
    2718/     E06 :                     ;;; VTL_EXEC_PRINT
    2719/     E06 :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 50 - 2024年08月18日 14時35分23秒


    2720/     E06 :                     VTL_EXEC_PRINT:
    2721/     E06 : 46 20 03            	CALL MOV_A_MEMREG16D	  ; check '='
    2722/     E09 : 3C 3D               	CPI '='
    2723/     E0B : 48 CB 09            	JNZ VTL_EXEC_SYNTAX_ERROR
    2724/     E0E :                     
    2725/     E0E : 46 99 02             	CALL INC_REG16D
    2726/     E11 : 46 20 03            	CALL MOV_A_MEMREG16D
    2727/     E14 : A0                  	ANA  A
    2728/     E15 : 68 48 0E            	JZ   VTL_PRINT_ERREXIT		; EOL
    2729/     E18 :                     
    2730/     E18 : 3C 22               	CPI 22H 			; '"'
    2731/     E1A : 68 2C 0E            	JZ  VTL_PRINT_QUOTEDSTRING
    2732/     E1D :                     
    2733/     E1D : 26 44               	MVI E,lo(REG16_EVAL)
    2734/     E1F : (MACRO)              	LXI_BC .RETURN
    2734/     E1F : 0E 0E                       MVI B,up(.RETURN)
    2734/     E21 : 16 26                       MVI C,lo(.RETURN)
    2735/     E23 : 44 87 0A            	JMP EVAL_EXPRESSION_MINDEX_REG16E
    2736/     E26 :                     .RETURN:
    2737/     E26 : 46 5C 0D            	CALL PRINT_REG16E
    2738/     E29 : 44 4A 09            	JMP  VTL_EXECUTE_MINDEX_CONTINUE ; execute remaining string
    2739/     E2C :                     
    2740/     E2C :                     VTL_PRINT_QUOTEDSTRING:
    2741/     E2C : 46 99 02            	CALL INC_REG16D		; INDEX++
    2742/     E2F : 06 22               	MVI A,22H		; "
    2743/     E31 : 46 96 0E            	CALL PRINTSTR_MEMREG16D_DELIM_A
    2744/     E34 :                     
    2745/     E34 : 46 20 03            	CALL MOV_A_MEMREG16D
    2746/     E37 : 3C 3B               	CPI ';'
    2747/     E39 : 68 42 0E            	JZ  .SKIPCRLF	; skip CRLF and increment INDEX
    2748/     E3C : 46 60 00            	CALL PRINT_CRLF
    2749/     E3F : 44 4A 09            	JMP VTL_EXECUTE_MINDEX_CONTINUE ; execute remaining string
    2750/     E42 :                     .SKIPCRLF:	
    2751/     E42 : 46 99 02            	CALL INC_REG16D			; increment for ';'
    2752/     E45 : 44 4A 09            	JMP VTL_EXECUTE_MINDEX_CONTINUE ; execute remaining string
    2753/     E48 :                     
    2754/     E48 :                     VTL_PRINT_ERREXIT:
    2755/     E48 : (MACRO)              	MVI_REG16 REG16_ERROR,STR_VTL_ERROR_PRINT
    2755/     E48 :  (MACRO-2)                   LXI_HL REG16_ERROR
    2755/     E48 : 2E 38                       MVI H,up(REG16_ERROR)
    2755/     E4A : 36 6E                       MVI L,lo(REG16_ERROR)
    2755/     E4C : 3E 51                       MVI M,lo(STR_VTL_ERROR_PRINT)
    2755/     E4E : 30                          INR L
    2755/     E4F : 3E 01                       MVI M,up(STR_VTL_ERROR_PRINT)
    2755/     E51 : 31                          DCR L
    2756/     E52 : 44 D8 07            	JMP VTL_MAIN			 ; error and jump to start
    2757/     E55 :                     	
    2758/     E55 :                     ;;;----------------------------------------------------------------------------
    2759/     E55 :                     ;;; VTL_EXEC_PRINT_HEX2
    2760/     E55 :                     ;;; VTL_EXEC_PRINT_HEX4
    2761/     E55 :                     ;;;----------------------------------------------------------------------------
    2762/     E55 :                     VTL_EXEC_PRINT_HEX2:
    2763/     E55 : 46 99 02            	CALL INC_REG16D
    2764/     E58 : 46 20 03            	CALL MOV_A_MEMREG16D
    2765/     E5B : 3C 3D               	CPI '='
    2766/     E5D : 48 CB 09            	JNZ VTL_EXEC_SYNTAX_ERROR
    2767/     E60 : 46 99 02            	CALL INC_REG16D
    2768/     E63 : 26 44               	MVI E,lo(REG16_EVAL)
    2769/     E65 : (MACRO)              	LXI_BC .RETURN
    2769/     E65 : 0E 0E                       MVI B,up(.RETURN)
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 51 - 2024年08月18日 14時35分23秒


    2769/     E67 : 16 6C                       MVI C,lo(.RETURN)
    2770/     E69 : 44 87 0A            	JMP EVAL_EXPRESSION_MINDEX_REG16E
    2771/     E6C :                     .RETURN:
    2772/     E6C : (MACRO)              	LXI_HL REG16_EVAL
    2772/     E6C : 2E 38                       MVI H,up(REG16_EVAL)
    2772/     E6E : 36 44                       MVI L,lo(REG16_EVAL)
    2773/     E70 : C7                  	MOV A,M
    2774/     E71 : 46 B8 02            	CALL PRINTHEX_A
    2775/     E74 : 44 4A 09            	JMP VTL_EXECUTE_MINDEX_CONTINUE ; execute remaining string
    2776/     E77 :                     
    2777/     E77 :                     VTL_EXEC_PRINT_HEX4:
    2778/     E77 : 46 99 02            	CALL INC_REG16D
    2779/     E7A : 46 20 03            	CALL MOV_A_MEMREG16D
    2780/     E7D : 3C 3D               	CPI '='
    2781/     E7F : 48 CB 09            	JNZ VTL_EXEC_SYNTAX_ERROR
    2782/     E82 : 46 99 02            	CALL INC_REG16D
    2783/     E85 : 26 44               	MVI E,lo(REG16_EVAL)
    2784/     E87 : (MACRO)              	LXI_BC .RETURN
    2784/     E87 : 0E 0E                       MVI B,up(.RETURN)
    2784/     E89 : 16 8E                       MVI C,lo(.RETURN)
    2785/     E8B : 44 87 0A            	JMP EVAL_EXPRESSION_MINDEX_REG16E
    2786/     E8E :                     .RETURN:
    2787/     E8E : 46 F7 0D            	CALL PRINTHEX_REG16E
    2788/     E91 : 44 4A 09            	JMP VTL_EXECUTE_MINDEX_CONTINUE ; execute remaining string
    2789/     E94 :                     
    2790/     E94 :                     ;;;----------------------------------------------------------------------------
    2791/     E94 :                     ;;; PRINTSTR_MEMREG16D_DELIM_A(Delimiter is A and 00H)
    2792/     E94 :                     ;;; PRINTSTR_MEMREG16D        (Delimiter is 0x00)
    2793/     E94 :                     ;;; Print a string 
    2794/     E94 :                     ;;; put a string on REG16(D)[] to serial output until the A or 00H
    2795/     E94 :                     ;;; REG(D) is incremented to
    2796/     E94 :                     ;;; 	the end of the string    (if the delimiter == 00H)
    2797/     E94 :                     ;;; 	the end of the string +1 (if the delimiter != 00H)
    2798/     E94 :                     ;;; 
    2799/     E94 :                     ;;; maximum string length = 256 (to avoid endless loop)
    2800/     E94 :                     ;;; 
    2801/     E94 :                     ;;; destroy: A, HL
    2802/     E94 :                     ;;;----------------------------------------------------------------------------
    2803/     E94 :                     PRINTSTR_MEMREG16D:
    2804/     E94 : 06 00               	MVI A, 00H
    2805/     E96 :                     PRINTSTR_MEMREG16D_DELIM_A:
    2806/     E96 : 46 CE 01            	CALL PUSH_BC
    2807/     E99 : 46 DE 01            	CALL PUSH_DE
    2808/     E9C :                     
    2809/     E9C : E0                  	MOV E,A		; save the delimiter A to E
    2810/     E9D : 46 3A 05            	CALL MOV_BC_REG16D
    2811/     EA0 : E9                  	MOV H,B
    2812/     EA1 : F2                  	MOV L,C
    2813/     EA2 : 16 00               	MVI C,00H       ; count 256
    2814/     EA4 :                     .LOOP:
    2815/     EA4 : C7                  	MOV A,M
    2816/     EA5 : A0                  	ANA A
    2817/     EA6 : 68 BC 0E            	JZ .BREAK
    2818/     EA9 : BC                  	CMP E
    2819/     EAA : 68 BC 0E            	JZ .BREAK
    2820/     EAD : 10                  	INR C
    2821/     EAE : 68 C6 0E            	JZ .EXIT		; to avoid endless loop
    2822/     EB1 : 46 40 00            	CALL PUTCH
    2823/     EB4 : 30                  	INR L
    2824/     EB5 : 48 A4 0E            	JNZ .LOOP
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 52 - 2024年08月18日 14時35分23秒


    2825/     EB8 : 28                  	INR H			; INC HL
    2826/     EB9 : 44 A4 0E            	JMP .LOOP
    2827/     EBC :                     .BREAK:
    2828/     EBC : C4                  	MOV A,E			; INC HL if defimiter is not 00H
    2829/     EBD : A0                  	ANA A
    2830/     EBE : 68 C6 0E            	JZ  .EXIT
    2831/     EC1 : 30                  	INR L
    2832/     EC2 : 48 C6 0E            	JNZ .EXIT
    2833/     EC5 : 28                  	INR H
    2834/     EC6 :                     .EXIT:
    2835/     EC6 : CD                  	MOV B,H
    2836/     EC7 : D6                  	MOV C,L
    2837/     EC8 : 46 1C 02            	CALL POP_DE
    2838/     ECB : 46 33 05            	CALL MOV_REG16D_BC 	; set incremented pointer to REG(D)
    2839/     ECE : 44 0C 02            	JMP  POP_BC
    2840/     ED1 :                     
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 53 - 2024年08月18日 14時35分23秒


  Symbol Table (* = unused):
  --------------------------

 ADD_REG16A_B :                 561 C |  ADD_REG16D_REG16E :            56D C |
 AND_REG16D_REG16E :            6DE C |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
 ARRAYTOP :                    3900 - | *CASESENSITIVE :                  0 - |
 CLEAR_AND_PRINT :             0DDD C |  CLEAR_REG16D :                 509 C |
 CLEAR_REG16E :                 512 C |  CLEAR_REG16L :                 51B C |
 CMP_REG16D_REG16E :            70A C |  CMP_REG16D_REG16E.NEGD :       71D C |
 CMP_REG16D_REG16E.NEGD_POSE :  733 C |  CMP_REG16D_REG16E.POSD_NEGE :  72F C |
 CMP_UNSIGNED_REG16D_REG16E :   6FC C |  CODE_JMP :                      44 - |
 COMPLEMENT2_REG16D :           548 C | *COMPMODE :                       0 - |
*CONSTPI :        3.141592653589793 - |  CR :                            0D - |
 CTOI_A :                       316 C |  CTOREG16NUM_A :                523 C |
*DATE :             "2024\-027\-071\-07608\-026\-100\-12018\-026\-105\-091" - |
 DEBUG :                          1 - |  DEC_REG16D :                   2A5 C |
 DEC_REG16D.LZERO :             2B1 C |  DISPATCH_PRINT :               9DD C |
 DIV2_REG16A :                  5A7 C |  DIV_DIV0 :                     65F C |
 DIV_EXIT :                     654 C |  DIV_LOOP :                     626 C |
 DIV_NEXT :                     63E C |  DIV_NORMALIZE_LOOP :           605 C |
 DIV_REG16D_REG16E :            672 C |  DIV_REG16D_REG16E.L1 :         695 C |
 DIV_REG16D_REG16E.L2 :         6A5 C |  DIV_REG16D_REG16E.L3 :         6B7 C |
 DIV_REG16D_REG16E.L4 :         6C8 C |  DIV_START :                    621 C |
 DIV_UNSIGNED_REG16D_REG16E :   5EB C |  EVAL_ADD :                    0B42 C |
 EVAL_AND :                    0B9D C |  EVAL_CONTINUE :               0AAE C |
 EVAL_CONTINUE.RETURN :        0AD5 C |  EVAL_DIV :                    0B54 C |
 EVAL_EQU :                    0B5A C |  EVAL_EXIT :                   0B30 C |
 EVAL_EXPRESSION_MINDEX_REG16E :                                       0A87 C |
 EVAL_GEQ :                    0B7A C |  EVAL_LE :                     0B71 C |
 EVAL_LVALUE_FALSE :           0B60 C |  EVAL_LVALUE_TRUE :            0B66 C |
 EVAL_MUL :                    0B4E C |  EVAL_NEQ :                    0B83 C |
 EVAL_OR :                     0BA3 C |  EVAL_REM :                    0B8C C |
 EVAL_START :                  0AA5 C |  EVAL_START.RETURN :           0AAE C |
 EVAL_SUB :                    0B48 C |  EVAL_XOR :                    0B97 C |
*FALSE :                          0 - |  FIND_LINE_AND_EXEC :           8B4 C |
 FIND_LINE_AND_EXEC.GO :        8EB C |  FIND_LINE_AND_EXEC.LOOP :      8BF C |
*FULLPMMU :                       1 - |  GETCH :                         4A C |
 GETFACTOR_ARRAY :             0C4A C |  GETFACTOR_ARRAY.RETURN :      0C56 C |
 GETFACTOR_DECIMAL_NUMBER :    0C36 C | *GETFACTOR_ERROR :             0BEF C |
 GETFACTOR_EXIT :              0C01 C |  GETFACTOR_EXIT_NOINCREMENT :  0C06 C |
 GETFACTOR_GETCH :             0CA0 C |  GETFACTOR_GETVALUE :          0CAE C |
 GETFACTOR_GETVALUE.RETURN :   0CC8 C |  GETFACTOR_LEFTBRACE :         0C13 C |
 GETFACTOR_LEFTBRACE.RETURN :  0C1F C |  GETFACTOR_MINDEX_REG16E :     0BA9 C |
 GETFACTOR_MINUS :             0C22 C |  GETFACTOR_MINUS.RETURN :      0C2E C |
 GETFACTOR_PEND :              0C98 C |  GETFACTOR_RANDOM :            0C85 C |
 GETFACTOR_REMAINDER :         0C75 C |  GETFACTOR_THISLINE :          0C7D C |
 GETFACTOR_VARIABLE :          0C3E C |
 GETHEXNUMBER_MEMREG16D_REG16E :                                        405 C |
 GETHEXNUMBER_MEMREG16D_REG16E.EXIT :                                   42E C |
 GETHEXNUMBER_MEMREG16D_REG16E.LOOP :                                   40B C |
 GETLINE_MEMREG16D :            3A8 C |  GETLINE_MEMREG16D.BS :         3D1 C |
 GETLINE_MEMREG16D.EXIT :       3F2 C |  GETLINE_MEMREG16D.INSERTCHAR : 3E6 C |
 GETLINE_MEMREG16D.L1 :         3C1 C | *GETLINE_MEMREG16D.L1_NEXT :    3D4 C |
 GETLINE_MEMREG16D.LOOP :       3B3 C |  GETNUMBER_MEMREG16D_REG16E :   431 C |
 GETNUMBER_MEMREG16D_REG16E.EXIT :                                      474 C |
 GETNUMBER_MEMREG16D_REG16E.LOOP :                                      443 C |
 GETSIGN_REG16D :               541 C | *GET_ARRAY_INDEX :              970 C |
 GET_ARRAY_INDEX.RETURN :       979 C | *HAS64 :                          1 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 54 - 2024年08月18日 14時35分23秒


 INC_REG16D :                   299 C |  INSERT_PROGRAM_EXIT :         0D0D C |
 INSERT_PROGRAM_LOOP :         0CF6 C | *INSUPMODE :                      0 - |
 ISALPHA_A :                    304 C |  ISALPHA_A.FALSE :              314 C |
 ISHEX_A :                      2EA C |  ISHEX_A.FALSE :                302 C |
 ISNUM_A :                      2E0 C |  ISNUM_A.FALSE :                2E8 C |
 ISZERO_REG16D :                557 C |  ISZERO_REG16L :                558 C |
 LF :                            0A - |  LINEBUF :                     3D00 - |
*LISTON :                         1 - | *MACEXP :                         7 - |
*MAIN :                           0 C |  MAKE_RANDOMNUMBER :            737 C |
 MAXINT :                      7FFF - |  MEM_CLEAR :                    48D C |
 MEM_CLEAR.L1 :                 49F C |  MEM_CLEAR.LOOP :               498 C |
 MEM_DUMP :                     4AF C |  MEM_DUMP.L1 :                  4C9 C |
 MEM_DUMP.L2 :                  4DA C |  MEM_DUMP.LOOP1 :               4DE C |
 MEM_DUMP.LOOP2 :               4E6 C | *MININT :                      8001 - |
*MOMCPU :                     8008E - |  MOMCPUNAME :             "8008NEW" - |
 MOV_A_MEMREG16D :              320 C | *MOV_BC_MEMREG16D :             33E C |
 MOV_BC_MEMREG16D.L1 :          34F C |  MOV_BC_REG16D :                53A C |
*MOV_BC_REG16L :                53B C |  MOV_MEMREG16D_A :              32F C |
*MOV_MEMREG16D_BC :             353 C |  MOV_MEMREG16D_BC.L1 :          364 C |
 MOV_MEMREG16D_REG16E :         389 C |  MOV_MEMREG16D_REG16E.L1 :      3A1 C |
 MOV_REG16B_REG16D :            272 C |  MOV_REG16B_REG16E :            28C C |
*MOV_REG16D_8BIT_A :            52B C |  MOV_REG16D_BC :                533 C |
 MOV_REG16D_REG16B :            27F C |  MOV_REG16D_REG16E :            258 C |
 MOV_REG16E_MEMREG16D :         368 C |  MOV_REG16E_MEMREG16D.L1 :      37C C |
 MOV_REG16E_REG16D :            265 C |  MUL2_REG16A :                  599 C |
 MUL_REG16D_REG16E :            5B5 C |  MUL_REG16D_REG16E.LOOP :       5D3 C |
 MUL_REG16D_REG16E.NEXT :       5DD C | *NESTMAX :                      100 - |
 OR_REG16D_REG16E :             6ED C | *PADDING :                        1 - |
 PCSTACK :                     3E00 - |  POP_A :                        1EE C |
 POP_AB :                       1FC C |  POP_BC :                       20C C |
 POP_DE :                       21C C |  POP_REG16A :                   242 C |
 PRINTHEX_A :                   2B8 C |  PRINTHEX_A.L1 :                2C9 C |
 PRINTHEX_A.L2 :                2D8 C |  PRINTHEX_REG16D :             0DE8 C |
 PRINTHEX_REG16E :             0DF7 C |  PRINTSTR_MEMREG16D :          0E94 C |
 PRINTSTR_MEMREG16D_DELIM_A :  0E96 C |
 PRINTSTR_MEMREG16D_DELIM_A.BREAK :                                    0EBC C |
 PRINTSTR_MEMREG16D_DELIM_A.EXIT :                                     0EC6 C |
 PRINTSTR_MEMREG16D_DELIM_A.LOOP :                                     0EA4 C |
 PRINT_4BIT_A :                0DE3 C |  PRINT_CRLF :                    60 C |
 PRINT_LIST :                  0D24 C |  PRINT_LIST.LOOP :             0D2F C |
 PRINT_POSITIVE :              0D8B C |  PRINT_REG16D :                0D66 C |
 PRINT_REG16D_START :          0D6C C |  PRINT_REG16E :                0D5C C |
 PRINT_REG4D_ZEROSUP :         0DCF C |  PROGRAM_END :                 37FF - |
 PROGRAM_START :               1000 - |  PUSH_A :                       1B0 C |
 PUSH_AB :                      1BE C |  PUSH_BC :                      1CE C |
 PUSH_BC_PCSTACK :              17E C |  PUSH_DE :                      1DE C |
 PUSH_REG16A :                  22C C |  PUTCH :                         40 C |
 PUTCH.WAIT :                    41 C |  PUTS :                          52 C |
 RANDOM_SEED :                  4D2 - |  REG16_ARRAYINDEX :            384E C |
 REG16_A_TO_Z :                3802 C |  REG16_CONST_10 :              387A C |
 REG16_CONST_100 :             3878 C |  REG16_CONST_1000 :            3876 C |
 REG16_CONST_10000 :           3874 C |  REG16_DIVIDEND :              3866 C |
 REG16_DIVISOR :               3868 C |  REG16_DIVRESULT :             3864 C |
 REG16_ERROR :                 386E C |  REG16_EVAL :                  3844 C |
 REG16_FACTOR :                3842 C |  REG16_INDEX :                 3800 C |
 REG16_LAST :                  387F C |  REG16_LINENUM :               3836 C |
 REG16_LVALUE :                383E C |  REG16_MON_TMP :               386A C |
 REG16_MON_TMP2 :              386C C |  REG16_NEXTLINE_PTR :          383A C |
 REG16_PEND :                  383C C |  REG16_RANDOM0 :               384A C |
 REG16_RANDOM1 :               384C C |  REG16_RETURNSTACK :           3848 C |
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 55 - 2024年08月18日 14時35分23秒


 REG16_RMND :                  3846 C |  REG16_RVALUE :                3840 C |
*REG16_TEST :                  3860 C | *REG16_TEST2 :                 3862 C |
 REG16_THISLINE_PTR :          3838 C |  REG16_TMP :                   3852 C |
 REG16_TMP2 :                  3854 C |  REG16_TMP2_MUL :              3858 C |
 REG16_TMP_ARRAY :             3850 C |  REG16_TMP_GETNUM :            385A C |
 REG16_TMP_MUL :               3856 C |  REG16_TMP_PRINT :             385E C |
 REG16_TMP_REG :               385C C |  REG8_ERROR2 :                 3870 C |
 REG8_SIGNDIVIDEND :           3871 C |  REG8_SIGNDIVISOR :            3872 C |
 REG8_ZEROSUP :                3873 C |  REGPAGE :                       38 - |
 REGTOP :                      3800 - |  REG_CSR :                        0 - |
 REG_RX :                         1 - |  REG_TX :                        10 - |
*RELAXED :                        0 - |  RETURNSTACK :                 3D00 - |
*RETURN_ADDRESS :              387D C |  RETURN_BY_JMP :               387C C |
 RETURN_BY_PCSTACK :            18E C | *RST0 :                           0 C |
*RST1 :                           8 C | *RST2 :                          10 C |
*RST3 :                          18 C | *RST4 :                          20 C |
*RST5 :                          28 C | *RST6 :                          30 C |
*RST7 :                          38 C |  SKIPSPACE :                    94C C |
 SKIPSPACE.NEXT :               95A C |  STACK :                       3F00 - |
 START :                        100 C |  STR_VFD_INIT :                 10A C |
 STR_VTL_BUF :                  16A C |  STR_VTL_ERRORLINENUM :         179 C |
 STR_VTL_ERROR_EOL :            15D C |  STR_VTL_ERROR_FACTOR :         164 C |
 STR_VTL_ERROR_OPERATOR :       157 C |  STR_VTL_ERROR_PRINT :          151 C |
 STR_VTL_ERROR_SYNTAX :         14B C |  STR_VTL_MESSAGE :              10F C |
 STR_VTL_OK :                   144 C |  STR_VTL_PCSP :                 173 C |
 STR_VTL_SP :                   16F C |  SUB_REG16D_REG16E :            581 C |
*TIME :               "14\-026\-103\-12635\-027\-120\-12223\-025\-089\-110" - |
*TRUE :                           1 - | *VERSION :                     142F - |
 VTL_ERROR_NOLINENUM :          822 C | *VTL_EXECUTE_MINDEX :           94A C |
 VTL_EXECUTE_MINDEX_CONTINUE :  94A C |  VTL_EXEC_ARRAY :               9F9 C |
 VTL_EXEC_ASSIGN_PEND :        0A33 C |  VTL_EXEC_ASSIGN_SEED :        0A48 C |
 VTL_EXEC_ASSIGN_VARIABLE :     9ED C |  VTL_EXEC_EQUAL_OK :            98E C |
 VTL_EXEC_EQUAL_OK.RETURN :     99A C |  VTL_EXEC_FAST_GOTO :          0A57 C |
 VTL_EXEC_GOSUB_PUSHCONTEXT_AND_GO :                                   0A61 C |
 VTL_EXEC_GOTO :               0A21 C |  VTL_EXEC_IF :                 0A16 C |
 VTL_EXEC_LEFTTERM :            97D C |  VTL_EXEC_PRINT :              0E06 C |
 VTL_EXEC_PRINT.RETURN :       0E26 C |  VTL_EXEC_PRINT_HEX2 :         0E55 C |
 VTL_EXEC_PRINT_HEX2.RETURN :  0E6C C |  VTL_EXEC_PRINT_HEX4 :         0E77 C |
 VTL_EXEC_PRINT_HEX4.RETURN :  0E8E C |  VTL_EXEC_PUTCHAR :            0A3D C |
 VTL_EXEC_SYNTAX_ERROR :        9CB C |  VTL_INSERT_PROGRAMLINE :      0CD0 C |
 VTL_LOOP :                     879 C |  VTL_MAIN :                     7D8 C |
 VTL_MONITORCMD :               47A C |  VTL_NOERROR :                  822 C |
 VTL_OK :                       852 C |  VTL_PRINT_ERREXIT :           0E48 C |
 VTL_PRINT_QUOTEDSTRING :      0E2C C |
 VTL_PRINT_QUOTEDSTRING.SKIPCRLF :                                     0E42 C |
 VTL_RUN_NEXTLINE :             936 C |  VTL_RUN_PROGRAM_MINDEX :       8F1 C |
 VTL_RUN_PROGRAM_MINDEX_FROM_GOTO :                                     903 C |
 VTL_RUN_PROGRAM_MINDEX_FROM_RETURN :                                   913 C |
 VTL_RUN_SINGLE_LINE :          94A C |  VTL_SPOK :                     83A C |
 VTL_START :                    789 C | *VTL_START.LOOP :               7B0 C |
 XOR_REG16D_REG16E :            6CF C | *Z80SYNTAX :                      0 - |

    316 symbols
     43 unused symbols

 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 56 - 2024年08月18日 14時35分23秒


  Defined Macros:
  ---------------

LXI_BC                                | LXI_HL                               
MVI_REG16                             | PUTCHAR                              
SAFEPUTCHAR                           |

      5 macros

 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 57 - 2024年08月18日 14時35分23秒


  Defined Functions:
  ------------------

UP                                    | LO                                   

 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 58 - 2024年08月18日 14時35分23秒


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.03 seconds assembly time

   2861 lines source file
   3067 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
